{"version":3,"sources":["webpack:///clerk.min.js","webpack:///webpack/bootstrap 91edb8746bc89aec9634","webpack:///./lib/clerk.js","webpack:///./~/superagent/lib/client.js","webpack:///./~/superagent/~/component-emitter/index.js","webpack:///./~/superagent/~/reduce-component/index.js"],"names":["this","modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","request","noop","extend","target","source","key","i","arguments","asString","that","Object","prototype","toString","isString","isArray","isFunction","clerk","uri","make","version","defaultHost","Client","_parseURI","db","exec","path","substr","index","decodeURIComponent","client","base","match","replace","Base","args","slice","callback","length","pop","_request","method","query","data","headers","fn","options","body","JSON","stringify","test","_replacer","auth","_do","self","req","value","set","send","end","res","err","error","header","_error","_response","text","status","json","len","item","rows","results","uuids","meta","_meta","doc","Error","reason","code","val","proto","hasId","_id","hasRev","_rev","rev","_headers","_","start","withDoc","q","b","h","f","state","encodeURI","shift","_db","name","DB","dbs","count","info","stats","log","e","SyntaxError","apply","tasks","config","replicate","encodeURIComponent","create","destroy","exists","xhr","get","head","etag","parse","contentType","contentLength","post","docs","ok","put","del","_deleted","copy","sourcePath","targetPath","sourceRev","targetRev","Destination","all","_viewOptions","find","view","split","changes","feed","_changes","follow","stop","update","handler","attachment","attachmentName","attach","commit","purge","revs","compact","vacuum","startkey","endkey","stale","keys","isHost","obj","str","getXHR","root","XMLHttpRequest","location","protocol","ActiveXObject","isObject","serialize","pairs","push","join","parseString","parts","pair","parseHeader","line","field","lines","fields","indexOf","toLowerCase","trim","type","params","reduce","Response","responseText","setStatusProperties","getAllResponseHeaders","getResponseHeader","setHeaderProperties","parseBody","Request","url","Emitter","_query","_header","on","original","window","s","serializeObject","types","html","xml","urlencoded","form","form-data","application/x-www-form-urlencoded","application/json","ct","statusType","clientError","serverError","toError","accepted","noContent","badRequest","unauthorized","notAcceptable","notFound","forbidden","msg","use","timeout","ms","_timeout","clearTimeout","_timer","abort","aborted","emit","unset","getHeader","accept","user","pass","btoa","_formData","FormData","append","file","filename","_data","_callback","crossDomainError","crossDomain","timeoutError","withCredentials","_withCredentials","onreadystatechange","readyState","upload","onprogress","percent","total","setTimeout","open","setRequestHeader","patch","mixin","addEventListener","event","_callbacks","once","off","removeListener","removeAllListeners","removeEventListener","callbacks","cb","splice","listeners","hasListeners","arr","initial","idx","curr"],"mappings":"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","file":"clerk.min.js","sourcesContent":["this[\"clerk\"] =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n/*!\n\nClerk - CouchDB client for node and the browser.\nCopyright 2012-2015 Michael Phan-Ba\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n*/\n\n/**\n * Module dependencies.\n */\n\nvar request = __webpack_require__(1);\n\n/**\n * No-op function.\n */\n\nvar noop = function () {};\n\n/**\n * Copy properties from sources to target.\n *\n * @param {Object} target The target object.\n * @param {Object...} sources The source object.\n * @return {Object} The target object.\n * @api private\n */\n\nvar extend = function (target /* sources.. */) {\n  var source, key, i = 1;\n  while (source = arguments[i++]) {\n    for (key in source) target[key] = source[key];\n  }\n  return target;\n};\n\n/**\n * Stringify value.\n *\n * @param {Object} that That value to stringify.\n * @return {String} The stringifyed value.\n * @api private\n */\n\nvar asString = function (that) {\n  return Object.prototype.toString.call(that);\n};\n\n/**\n * Check if value is a string.\n *\n * @param {Object} that That value to check.\n * @return {Boolean} `true` if string, `false` otherwise.\n * @api private\n */\n\nvar isString = function (that) {\n  return asString(that) == \"[object String]\";\n};\n\n/**\n * Check if value is an object.\n *\n * @param {Object} that That value to check.\n * @return {Boolean} `true` if object, `false` otherwise.\n * @api private\n */\n\nvar isObject = function (that) {\n  return asString(that) == \"[object Object]\";\n};\n\n/**\n * Check if value is an array.\n *\n * @param {Object} that That value to check.\n * @return {Boolean} `true` if array, `false` otherwise.\n * @api private\n */\n\nvar isArray = function (that) {\n  return asString(that) == \"[object Array]\";\n};\n\n/**\n * Check if value is a function.\n *\n * @param {Object} that That value to check.\n * @return {Boolean} `true` if function, `false` otherwise.\n * @api private\n */\n\nvar isFunction = function (that) {\n  return asString(that) == \"[object Function]\";\n};\n\n/**\n * Clerk library entry point.\n *\n * @param {String} servers CouchDB server URI.\n * @return {Client|DB} If a URI path is given, returns a `DB`, otherwise\n *   returns a `Client`.\n * @see [CouchDB Wiki](http://wiki.apache.org/couchdb/)\n * @see [CouchDB Guide](http://guide.couchdb.org/)\n * @see [Couchbase 2.0](http://www.couchbase.com/docs/couchbase-single-server-2.0/)\n */\n\nvar clerk = function (uri) {\n  return clerk.make(uri);\n};\n\n/**\n * Library version.\n */\n\nclerk.version = \"0.7.0-devel\";\n\n/**\n * Default host.\n */\n\nclerk.defaultHost = \"http://127.0.0.1:5984\";\n\n/**\n * Create single CouchDB client.\n *\n * @param {String} uri Fully qualified URI.\n * @return {Client|DB} If `uri` has a path, the last segment of the\n *    path is used as the database name and a `DB` instance is\n *    returned. Otherwise, a `Client` instance is returned.\n */\n\nclerk.make = function (uri) {\n  if (!uri) return new clerk.Client(this.defaultHost);\n\n  uri = clerk._parseURI(uri);\n\n  var db = /\\/*([^\\/]+)\\/*$/.exec(uri.path);\n  if (db) {\n    uri.path = uri.path.substr(0, db.index);\n    db = db[1] && decodeURIComponent(db[1]);\n  }\n\n  var client = new clerk.Client(uri.base + uri.path);\n  return db ? client.db(db) : client;\n};\n\n/**\n * Parse URI.\n *\n * The URI is normalized by removing extra `//` in the path and extracting\n * the authentication component, if present.\n *\n * @param {String} uri Fully qualified URI.\n * @return {String} The normalized URI.\n */\n\nclerk._parseURI = function (uri) {\n  var match;\n\n  if (uri) {\n    if (match = /^(https?:\\/\\/[^\\/]+)([^\\/]+)(.*)\\/*$/.exec(uri)) {\n      return {\n        base: match[1] + match[2].replace(/\\/+/g, \"\\/\"),\n        path: match[3]\n      };\n    }\n  }\n\n  return { base: uri || \"\", path: \"\" };\n};\n\n/**\n * Base prototype for `Client` and `DB`.\n * Encapsulates HTTP methods, JSON handling, and response coersion.\n */\n\nclerk.Base = function () {};\n\nclerk.Base.prototype = {\n\n  /**\n   * Service request and parse JSON response.\n   *\n   * @param {String} [method=\"\"GET\"\"] HTTP method.\n   * @param {String} [path=this.uri] HTTP URI.\n   * @param {Object} [query] HTTP query options.\n   * @param {Object} [body] HTTP body.\n   * @param {Object} [headers] HTTP headers.\n   * @param {Function} [callback] Callback function.\n   *   @param {Error|null} error Error or `null` on success.\n   *   @param {Object} data Response data.\n   *   @param {Integer} status Response status code.\n   *   @param {Object} headers Response headers.\n   * @return This object for chaining.\n   */\n\n  request: function (/* [method], [path], [query], [data], [headers], [callback] */) {\n    var args = [].slice.call(arguments)\n      , callback = isFunction (args[args.length - 1]) && args.pop();\n\n    return this._request({\n      method: args[0],\n      path: args[1],\n      query: args[2],\n      data: args[3],\n      headers: args[4],\n      fn: callback\n    });\n  },\n\n  /**\n   * Internal service request and parse JSON response handler.\n   *\n   * @param {String} options\n   *   @param {String} method HTTP method.\n   *   @param {String} path HTTP URI.\n   *   @param {Object} query HTTP query options.\n   *   @param {Object} data HTTP body data.\n   *   @param {Object} headers HTTP headers.\n   *   @param {Function} fn Callback function.\n   *     @param {Error|null} error Error or `null` on success.\n   *     @param {Object} data Response data.\n   *     @param {Integer} status Response status code.\n   *     @param {Object} headers Response headers.\n   * @api private\n   */\n\n  _request: function (options) {\n    if (!options.method) options.method = \"GET\";\n    if (!options.headers) options.headers = {};\n    options.path = options.path ? \"/\" + options.path : \"\";\n\n    // set default headers\n    if (!(\"Content-Type\" in options.headers)) {\n      options.headers[\"Content-Type\"] = \"application/json\";\n    }\n    if (!(\"Accept\" in options.headers)) {\n      options.headers[\"Accept\"] = \"application/json\";\n    }\n\n    options.uri = this.uri + options.path;\n    options.body = options.data && JSON.stringify(options.data,\n      /^\\/_design/.test(options.path) && this._replacer\n    ) || \"\";\n\n    if (options.auth == null) options.auth = this.auth;\n\n    this._do(options);\n\n    return this;\n  },\n\n  /**\n   * Provider for servicing requests and parsing JSON responses.\n   *\n   * @param {String} options\n   *   @param {String} method HTTP method.\n   *   @param {String} uri HTTP URI.\n   *   @param {Object} query HTTP query options.\n   *   @param {Object} body HTTP body.\n   *   @param {Object} headers HTTP headers.\n   *   @param {Object} auth HTTP authentication.\n   *   @param {Function} fn Callback function.\n   *     @param {Error|null} error Error or `null` on success.\n   *     @param {Object} data Response data.\n   *     @param {Integer} status Response status code.\n   *     @param {Object} headers Response headers.\n   * @api private\n   */\n\n  _do: function (options) {\n    var self = this;\n    var req = request(options.method, options.uri);\n\n    // query string\n    if (options.query) {\n      // ensure query Array values are JSON encoded\n      for (key in options.query) {\n        if (typeof(value = options.query[key]) === \"object\") {\n          options.query[key] = JSON.stringify(value);\n        }\n      }\n      // set query on request\n      req.query(options.query);\n    }\n\n    // if auth passed in as object instead of in uri\n    if (options.auth) req.auth(options.auth);\n\n    // set headers\n    if (options.headers) req.set(options.headers);\n\n    // send body\n    if (options.body) req.send(options.body);\n\n    // send request\n    var fn = options.fn || noop;\n    req.end(function (res) {\n      var err = res.error;\n      var data;\n\n      if (!err) {\n        data = /^head$/i.test(options.method) ? res.header : res.body;\n        if (!data) data = res.text;\n        else if (data.error) err = self._error(data);\n        else data = self._response(data);\n      }\n\n      fn(err || null, data, res.status, res.header, res);\n    });\n  },\n\n  /**\n   * Coerce response to normalize access to `_id` and `_rev`.\n   *\n   * @param {Object} json The response JSON.\n   * @return The coerced JSON.\n   * @api private\n   */\n\n  _response: function (json) {\n    var data = json.rows || json.results || json.uuids || isArray(json) && json\n      , meta = this._meta\n      , i = 0, len, item;\n\n    if (data) {\n      extend(data, json).json = json;\n      for (len = data.length; i < len; i++) {\n        item = data[i] = meta(data[i]);\n        if (item.doc) item.doc = meta(item.doc);\n      }\n    } else {\n      data = meta(json);\n    }\n\n    return data;\n  },\n\n  /**\n   * Make an error out of the response.\n   *\n   * @param {Object} json The response JSON.\n   * @return An `Error` object.\n   * @api private\n   */\n\n  _error: function (json) {\n    var err = new Error(json.reason);\n    err.code = json.error;\n    return extend(err, json);\n  },\n\n  /**\n   * JSON stringify functions. Used for encoding view documents to JSON.\n   *\n   * @param {String} key The key to stringify.\n   * @param {Object} val The value to stringify.\n   * @return {Object} The stringified function value or the value.\n   * @api private\n   */\n\n  _replacer: function (key, val) {\n    return isFunction (val) ? val.toString() : val;\n  },\n\n  /**\n   * Coerce documents with prototypical `_id` and `_rev`\n   * values.\n   *\n   * @param {Object} doc The document to coerce.\n   * @return {Object} The coerced document.\n   * @api private\n   */\n\n  _meta: function (doc) {\n    var hasId = !doc._id && doc.id\n      , hasRev = !doc._rev && doc.rev\n      , proto;\n\n    if (hasId || hasRev) {\n      proto = function (){};\n      doc = extend(new proto(), doc);\n      proto = proto.prototype;\n      if (hasId) proto._id = doc.id;\n      if (hasRev) proto._rev = doc.rev;\n    }\n\n    return doc;\n  },\n\n  /**\n   * HTTP headers to parse.\n   *\n   * @api private\n   */\n\n  _headers: [\n    \"cache-control\",\n    \"content-length\",\n    \"content-type\",\n    \"date\",\n    \"etag\",\n    \"server\"\n  ],\n\n  /**\n   * Parse arguments.\n   *\n   * @param {Array} args The arguments.\n   * @param {Integer} start The index from which to start reading arguments.\n   * @param {Boolean} withDoc Set to `true` if the doc source is given as a\n   *   parameter before HTTP query options.\n   * @return This object for chaining.\n   * @api private\n   */\n\n  _: function (args, start, withDoc) {\n    var self = this, doc, id, rev;\n\n    function request(method, path, options) {\n      if (!options) options = {};\n      return self._request({\n        method: method,\n        path: path || request.p,\n        query: options.q || request.q,\n        data: options.b || request.b,\n        headers: options.h || request.h,\n        fn: options.f || request.f,\n        state: request\n      });\n    }\n\n    // [id], [doc], [query], [header], [callback]\n    args = [].slice.call(args, start || 0);\n\n    request.f = isFunction (args[args.length - 1]) && args.pop();\n    request.p = isString(args[0]) && encodeURI(args.shift());\n    request.q = args[withDoc ? 1 : 0] || {};\n    request.h = args[withDoc ? 2 : 1] || {};\n\n    if (withDoc) {\n      if (doc = (request.b = args[0])) {\n        if (id = request.p || doc._id || doc.id) request.p = id;\n        if (rev = request.q.rev || doc._rev || doc.rev) request.q.rev = rev;\n      }\n    }\n\n    return request;\n  }\n\n};\n\n/**\n * Clerk CouchDB client.\n *\n * @param {String} uri Fully qualified URI.\n * @param {Object} [auth] Authentication options.\n *   @param {String} [auth.user] Username.\n *   @param {String} [auth.pass] Password.\n * @see [CouchDB Wiki](http://wiki.apache.org/couchdb/Complete_HTTP_API_Reference)\n */\n\nclerk.Client = function (uri) {\n  this.uri = uri;\n  this._db = {};\n};\n\nclerk.Client.prototype = extend(new clerk.Base(), {\n\n  /**\n   * Select database to manipulate.\n   *\n   * @param {String} name DB name.\n   * @return {DB} DB object.\n   */\n\n  db: function (name) {\n    var db = this._db;\n    return db[name] || (db[name] = new clerk.DB(this, name, this.auth));\n  },\n\n  /**\n   * List all databases.\n   *\n   * @return This object for chaining.\n   * @see [CouchDB Wiki](http://wiki.apache.org/couchdb/HttpGetAllDbs)\n   */\n\n  dbs: function (/* [query], [headers], [callback] */) {\n    return this._(arguments)(\"GET\", \"_all_dbs\");\n  },\n\n  /**\n   * Get UUIDs.\n   *\n   * @param {Integer} [count=1] Number of UUIDs to get.\n   * @return This object for chaining.\n   * @see [CouchDB Wiki](http://wiki.apache.org/couchdb/HttpGetUuids)\n   */\n\n  uuids: function (count /* [query], [headers], [callback] */) {\n    var request = this._(arguments, +count == count ? 1 : 0);\n    if (count > 1) request.q.count = count;\n    return request(\"GET\", \"_uuids\");\n  },\n\n  /**\n   * Get server information.\n   *\n   * @return This object for chaining.\n   * @see [CouchDB Wiki](http://wiki.apache.org/couchdb/HttpGetRoot)\n   */\n\n  info: function (/* [query], [headers], [callback] */) {\n    return this._(arguments)(\"GET\");\n  },\n\n  /**\n   * Get server stats.\n   *\n   * @return This object for chaining.\n   * @see [CouchDB Wiki](http://wiki.apache.org/couchdb/HttpGetLog)\n   */\n\n  stats: function (/* [query], [headers], [callback] */) {\n    return this._(arguments)(\"GET\", \"_stats\");\n  },\n\n  /**\n   * Get tail of the server log file.\n   *\n   * @param {Object} [query] Query parameters.\n   *   @param {Integer} [query.bytes=1000] Number of bytes to read.\n   *   @param {Integer} [query.offset=0] Number of bytes from the end of\n   *     log file to start reading.\n   * @return This object for chaining.\n   * @see [CouchDB Wiki](http://wiki.apache.org/couchdb/HttpGetLog)\n   */\n\n  log: function (/* [query], [headers], [callback] */) {\n    var request = this._(arguments), callback = request.f;\n\n    if (!callback) return this;\n\n    request.f = function (e) {\n      if (e instanceof SyntaxError) e = null;\n      callback.apply(this, arguments);\n    };\n    return request(\"GET\", \"_log\");\n  },\n\n  /**\n   * List running tasks.\n   *\n   * @return This object for chaining.\n   * @see [CouchDB Wiki](http://wiki.apache.org/couchdb/HttpGetActiveTasks)\n   */\n\n  tasks: function (/* [query], [headers], [callback] */) {\n    return this._(arguments)(\"GET\", \"_active_tasks\");\n  },\n\n  /**\n   * Get or set configuration values.\n   *\n   * @param {String} [key] Configuration section or key.\n   * @param {String} [value] Configuration value.\n   * @return This object for chaining.\n   */\n\n  config: function (/* [key], [value], [query], [headers], [callback] */) {\n    var args = [].slice.call(arguments)\n      , key = isString(args[0]) && args.shift() || \"\"\n      , value = isString(args[0]) && args.shift()\n      , method = isString(value) ? \"PUT\" : \"GET\";\n    return this._(args)(method, \"_config/\" + key, { b: value });\n  },\n\n  /**\n   * Replicate databases.\n   *\n   * @param {Object} options Options.\n   *   @param {String} options.source Source database URL or local name.\n   *   @param {String} options.target Target database URL or local name.\n   *   @param {Boolean} [options.cancel] Set to `true` to cancel replication.\n   *   @param {Boolean} [options.continuous] Set to `true` for continuous\n   *     replication.\n   *   @param {Boolean} [options.create_target] Set to `true` to create the\n   *     target database.\n   *   @param {String} [options.filter] Filter name for filtered replication.\n   *     Example: \"mydesign/myfilter\".\n   *   @param {Object} [options.query] Query parameters for filter.\n   *   @param {String[]} [options.doc_ids] Document IDs to replicate.\n   *   @param {String} [options.proxy] Proxy through which to replicate.\n   * @return This object for chaining.\n   * @see [CouchDB Wiki](http://wiki.apache.org/couchdb/Replication)\n   */\n\n  replicate: function (options /* [query], [headers], [callback] */) {\n    return this._(arguments, 1)(\"POST\", \"_replicate\", { b: options });\n  }\n\n});\n\n/**\n * Methods for CouchDB database.\n *\n * @param {Client} client Clerk client.\n * @param {String} name DB name.\n * @param {Object} [auth] Authentication options.\n *   @param {String} [auth.user] Username.\n *   @param {String} [auth.pass] Password.\n * @return This object for chaining.\n */\n\nclerk.DB = function (client, name, auth) {\n  this.client = client;\n  this.name = name;\n  this.uri = client.uri + \"/\" + encodeURIComponent(name);\n  this.auth = auth;\n};\n\nclerk.DB.prototype = extend(new clerk.Base(), {\n\n  /**\n   * Create database.\n   *\n   * @return This object for chaining.\n   */\n\n  create: function (/* [query], [headers], [callback] */) {\n    return this._(arguments)(\"PUT\");\n  },\n\n  /**\n   * Destroy database.\n   *\n   * @return This object for chaining.\n   */\n\n  destroy: function (/* [query], [headers], [callback] */) {\n    return this._(arguments)(\"DELETE\");\n  },\n\n  /**\n   * Get database info.\n   *\n   * @return This object for chaining.\n   */\n\n  info: function (/* [query], [headers], callback */) {\n    return this._(arguments)(\"GET\");\n  },\n\n  /**\n   * Check if database exists.\n   *\n   * @return This object for chaining.\n   */\n\n  exists: function (/* [query], [headers], callback */) {\n    var request = this._(arguments), callback = request.f;\n\n    if (!callback) return this;\n\n    request.f = function (err, body, status, headers, xhr) {\n      callback(err, status === 200, status, headers, xhr);\n    };\n\n    return request(\"HEAD\");\n  },\n\n  /**\n   * Fetch document.\n   *\n   * Set `rev` in `query`.\n   *\n   * @param {String} id Document ID.\n   * @param {Object} [query] HTTP query options.\n   *   @param {Boolean} [query.revs] Fetch list of revisions.\n   *   @param {Boolean} [query.revs_info] Fetch detailed revision information.\n   * @param {Function} callback Callback function.\n   *   @param {Error|null} error Error or `null` on success.\n   *   @param {Object} data Response data.\n   *   @param {Integer} status Response status code.\n   * @return This object for chaining.\n   * @see [CouchDB Wiki](http://wiki.apache.org/couchdb/HTTP_Document_API#GET)\n   */\n\n  get: function (/* [id], [query], [headers], [callback] */) {\n    return this._(arguments)(\"GET\");\n  },\n\n  /**\n   * Get document metadata.\n   *\n   * @param {String} id Document ID.\n   * @param {Object} [query] HTTP query options.\n   * @param {Function} callback Callback function.\n   *   @param {Error|null} callback.error Error or `null` on success.\n   *   @param {Object|Object[]} [callback.body] Document metadata or array\n   *     of document metadata.\n   *     @param result.id Document ID.\n   *     @param result.rev Document revision.\n   *     @param [result.contentType] MIME content type. Only available when\n   *       getting metadata for single document.\n   *     @param [result.contentLength] Content length. Only available when\n   *       getting metadata for single document.\n   * @return This object for chaining.\n   * @see [CouchDB Wiki](http://wiki.apache.org/couchdb/HTTP_Document_API#HEAD)\n   */\n\n  head: function (/* [id], [query], [headers], callback */) {\n    var self = this\n      , request = self._(arguments), callback = request.f\n      , id = request.p;\n\n    if (!callback) return this;\n\n    request.f = function (err, body, status, headers, xhr) {\n      callback(err, err ? body : self._meta({\n        _id: id,\n        _rev: headers.etag && JSON.parse(headers.etag),\n        contentType: headers[\"content-type\"],\n        contentLength: headers[\"content-length\"]\n      }), status, headers, xhr);\n    };\n\n    return request(\"HEAD\");\n  },\n\n  /**\n   * Post document(s) to database.\n   *\n   * If documents have no ID, a document ID will be automatically generated\n   * on the server. If attachments are given, they will be automatically\n   * Base64 encoded. Streamed attachments are not supported. Attachments are\n   * only supported on Node.js.\n   *\n   * @param {Object} doc Document.\n   *   @param {String} [doc._id] Document ID. If set, uses given document ID.\n   *   @param {String} [doc._rev] Document revision. If set, allows update to\n   *     existing document.\n   *   @param {Object} [doc._attachments] Attachments. If given, must be a\n   *     map of filenames to attachment properties.\n   *     @param {String} [doc._attachments[filename]] Attachment filename, as\n   *       hash key.\n   *     @param {String} [doc._attachments[filename].contentType] Attachment\n   *       MIME content type.\n   *     @param {String|Object} [doc._attachments[filename].data] Attachment\n   *       data. Will be Base64 encoded.\n   * @param {Object} [query] HTTP query options.\n   *   @param {Boolean} [query.batch] Allow server to write document in\n   *     batch mode. Documents will not be written to disk immediately,\n   *     increasing the chances of write failure.\n   *   @param {Boolean} [query.all_or_nothing] For batch updating of\n   *     documents, use all-or-nothing semantics.\n   * @return This object for chaining.\n   * @see [CouchDB Wiki](http://wiki.apache.org/couchdb/HTTP_Document_API#POST)\n   * @see [CouchDB Wiki](http://wiki.apache.org/couchdb/HTTP_Bulk_Document_API)\n   */\n\n  post: function (docs /* [query], [headers], [callback] */) {\n    var request = this._(arguments, 1);\n    if (isArray(docs)) {\n      var callback = request.f;\n\n      request.p = \"_bulk_docs\";\n      request.b = extend({ docs: docs }, request.q);\n      request.q = null\n\n      // CouchDB older than 1.2 are missing the ok: true property\n      if (callback) request.f = function (err, body) {\n        if (!err) {\n          var i = 0, len = body.length, doc;\n          for (; i < len; i++) {\n            doc = body[i];\n            if (!doc.error) doc.ok = true;\n          }\n        }\n        callback.apply(this, arguments);\n      };\n    } else {\n      request.b = docs;\n    }\n    return request(\"POST\");\n  },\n\n  /**\n   * Put document in database.\n   *\n   * @param {Object} doc Document data. Requires `id` and `rev`.\n   * @param {String} [options] Options.\n   * @return This object for chaining.\n   * @see [CouchDB Wiki](http://wiki.apache.org/couchdb/HTTP_Document_API#PUT)\n   */\n\n  put: function (/* [id], [doc], [query], [headers], [callback] */) {\n    var request = this._(arguments, 0, 1);\n    // prevent acidentally creating database\n    if (!request.p) request.p = request.b._id || request.b.id;\n    if (!request.p) throw new Error(\"missing id\");\n    return request(\"PUT\");\n  },\n\n  /**\n   * Delete document(s).\n   *\n   * @param {String} doc Document or document ID.\n   * @param {Object} [query] HTTP query options.\n   * @return This object for chaining.\n   * @see [CouchDB Wiki](http://wiki.apache.org/couchdb/HTTP_Document_API#DELETE)\n   * @see [CouchDB Wiki](http://wiki.apache.org/couchdb/HTTP_Bulk_Document_API)\n   */\n\n  del: function (docs /* [query], [headers], [callback] */) {\n    if (isArray(docs)) {\n      var i = 0, len = docs.length, doc;\n      for (; i < len; i++) {\n        doc = docs[i], docs[i] = {\n          _id: doc._id || doc.id,\n          _rev: doc._rev || doc.rev,\n          _deleted: true\n        };\n      }\n      return this.post.apply(this, arguments);\n    } else {\n      var request = this._(arguments, 0, 1);\n      // prevent acidentally deleting database\n      if (!request.p) throw new Error(\"missing id\");\n      return request(\"DELETE\");\n    }\n  },\n\n  /**\n   * Copy document.\n   *\n   * @param {Object} source Source document.\n   *   @param {String} source.id Source document ID.\n   *   @param {String} [source.rev] Source document revision.\n   *   @param {String} [source._id] Source document ID. Alternate key for\n   *     `source.id`.\n   *   @param {String} [source._rev] Source document revision. Alternate key\n   *     for `source.id`.\n   * @param {Object} target Target document.\n   *   @param {String} target.id Target document ID.\n   *   @param {String} [target.rev] Target document revision.\n   *   @param {String} [target._id] Target document ID. Alternate key for\n   *     `target.id`.\n   *   @param {String} [target._rev] Target document revision. Alternate key\n   *     for `target.id`.\n   * @param {Object} [query] HTTP query options.\n   * @return This object for chaining.\n   * @see [CouchDB Wiki](http://wiki.apache.org/couchdb/HTTP_Document_API#COPY)\n   */\n\n  copy: function (source, target /* [query], [headers], [callback] */) {\n    var request = this._(arguments, 2)\n      , sourcePath = encodeURIComponent(source.id || source._id || source)\n      , targetPath = encodeURIComponent(target.id || target._id || target)\n      , sourceRev = source.rev || source._rev\n      , targetRev = target.rev || target._rev\n      , callback = request.f;\n\n    if (sourceRev) request.q.rev = sourceRev;\n    if (targetRev) targetPath += \"?rev=\" + encodeURIComponent(targetRev);\n\n    request.h.Destination = targetPath;\n\n    // CouchDB older than 1.2 are missing the ok: true property\n    // https://issues.apache.org/jira/browse/COUCHDB-903\n    if (callback) request.f = function (err, body) {\n      if (!err) body.ok = true;\n      callback.apply(this, arguments);\n    };\n\n    return request(\"COPY\", sourcePath);\n  },\n\n  /**\n   * Query all documents by ID.\n   *\n   * @param {Object} [query] HTTP query options.\n   *   @param {JSON} [query.startkey] Start returning results from this\n   *     document ID.\n   *   @param {JSON} [query.endkey] Stop returning results at this document\n   *     ID.\n   *   @param {Integer} [query.limit] Limit number of results returned.\n   *   @param {Boolean} [query.descending=false] Lookup results in reverse\n   *     order by key, returning documents in descending order by key.\n   *   @param {Integer} [query.skip] Skip this many records before\n   *     returning results.\n   *   @param {Boolean} [query.include_docs=false] Include document source for\n   *     each result.\n   *   @param {Boolean} [query.include_end=true] Include `query.endkey`\n   *     in results.\n   *   @param {Boolean} [query.update_seq=false] Include sequence value\n   *     of the database corresponding to the view.\n   * @return This object for chaining.\n   * @see [CouchDB Wiki](http://wiki.apache.org/couchdb/HTTP_Bulk_Document_API)\n   */\n\n  all: function (/* [query], [headers], [callback] */) {\n    var request = this._(arguments)\n      , body = this._viewOptions(request.q);\n    return request(body ? \"POST\" : \"GET\", \"_all_docs\", { b: body });\n  },\n\n  /**\n   * Query a view.\n   *\n   * @param {String|Object} view View name (e.g. mydesign/myview) or\n   *   temporary view definition. Using a temporary view is strongly not\n   *   recommended for production use.\n   * @param {Object} [query] HTTP query options.\n   *   @param {JSON} [query.key] Key to lookup.\n   *   @param {JSON} [query.startkey] Start returning results from this key.\n   *   @param {String} [query.startkey_docid] Start returning results\n   *     from this document ID. Allows pagination with duplicate keys.\n   *   @param {JSON} [query.endkey] Stop returning results at this key.\n   *   @param {String} [query.endkey_docid] Stop returning results at\n   *     this document ID. Allows pagination with duplicate keys.\n   *   @param {Integer} [query.limit] Limit number of results returned.\n   *   @param {Boolean|String} [query.stale] Do not refresh view even if\n   *     stale. For CouchDB versions `1.1.0` and up, set to `update_after` to\n   *     update view after results are returned.\n   *   @param {Boolean} [query.descending=false] Lookup results in reverse\n   *     order by key, returning documents in descending order by key.\n   *   @param {Integer} [query.skip] Skip this many records before\n   *     returning results.\n   *   @param {Boolean|Integer} [query.group=false] Use the reduce function\n   *     to group results by key. Set to an integer specify `group_level`.\n   *   @param {Boolean|Integer} [query.reduce=true] Use the reduce function.\n   *   @param {Boolean} [query.fetch=false] Include document source for\n   *     each result.\n   *   @param {Boolean} [query.include_end=true] Include `query.endkey`\n   *     in results.\n   *   @param {Boolean} [query.update_seq=false] Include sequence value\n   *     of the database corresponding to the view.\n   * @return This object for chaining.\n   * @see [CouchDB Wiki](http://wiki.apache.org/couchdb/HTTP_view_API)\n   */\n\n  find: function (view /* [query], [headers], [callback] */) {\n    var request = this._(arguments, 1), path, body;\n\n    if (isString(view)) {\n      path = view.split(\"/\", 2);\n      path = \"_design/\" + encodeURIComponent(path[0]) + \"/_view/\" + encodeURIComponent(path[1]);\n    } else {\n      path = \"_temp_view\";\n      body = view;\n    }\n\n    body = this._viewOptions(request.q, body);\n    return request(body ? \"POST\" : \"GET\", path, { b: body });\n  },\n\n  /**\n   * Get database changes.\n   *\n   * The `feed` option determines how the callback is called:\n   *\n   *   - `normal` calls the callback once.\n   *   - `longpoll` waits for a response, then calls the callback once.\n   *   - `continuous` calls the callback each time an update is received.\n   *     Implemented as the `database#follow()` method.\n   *\n   * @param {Object} [query] HTTP query options.\n   *   @param {String} [query.feed=\"normal\"] Type of feed. See comments\n   *     above.\n   *   @param {String} [query.filter] Filter updates using this filter.\n   *   @param {Integer} [query.limit] Maximum number of rows to return.\n   *   @param {Integer} [query.since=0] Start results from this sequence\n   *     number.\n   *   @param {Boolean} [query.include_docs=false] Include documents with\n   *     results.\n   *   @param {Integer} [query.timeout=1000] Maximum period in milliseconds\n   *     to wait for a change before sending a response, even if there are no\n   *     results.\n   *   @param {Integer} [query.heartbeat=1000] Period in milliseconds after\n   *     which an empty line is sent. Applicable only to feed types\n   *     `longpoll` and `continuous`. Overrides `query.timeout` to keep the\n   *     feed alive indefinitely.\n   * @return This object for chaining.\n   * @see [CouchDB Wiki](http://wiki.apache.org/couchdb/HTTP_database_API#Changes)\n   */\n\n  changes: function (/* [query], [headers], [callback] */) {\n    var request = this._(arguments);\n    if (request.q.feed != \"longpoll\") delete request.q.feed;\n    return this._changes(request);\n  },\n\n  /**\n   * Get database changes.\n   *\n   * @see `#changes()`.\n   */\n\n  follow: function (/* [query], [headers], callback */) {\n    var request = this._(arguments)\n      , callback = request.f;\n\n    if (!callback) return this;\n\n    request.q.feed = \"longpoll\";\n    request.f = function (err, doc) {\n      var body = doc, i = 0, len = doc.length, stop;\n      for (; i < len; i++) {\n        doc = body[i];\n        if (stop = callback.apply(this, arguments) === false || err) break;\n      }\n      if (!stop) this._changes(request);\n    };\n\n    return this._changes(request);\n  },\n\n  /**\n   * Service a changes request.\n   *\n   * @api private\n   */\n\n  _changes: function (request) {\n    return request(\"GET\", \"_changes\");\n  },\n\n  /**\n   * Update document using server-side handler.\n   *\n   * @param {String} handler Update handler. Example: mydesign/myhandler\n   * @param {String} [id] Document ID.\n   * @param {Object} [query] HTTP query options.\n   * @param {Object|String} [data] Data.\n   * @param {Object} [headers] Headers.\n   * @return This object for chaining.\n   * @see [CouchDB Wiki](http://wiki.apache.org/couchdb/Document_Update_Handlers)\n   */\n\n  update: function (handler /* [id], [query], [data], [headers], [callback] */) {\n    var request = this._(arguments, 1, 1)\n      , path = handler.split(\"/\", 2);\n\n    path = \"_design/\" + encodeURIComponent(path[0]) + \"/_update/\" + encodeURIComponent(path[1]);\n    if (request.p) path += \"/\" + request.p;\n\n    return request(request.p ? \"PUT\" : \"POST\", path, {\n      q: request.b,\n      b: request.q\n    });\n  },\n\n  /**\n   * Download attachment from document.\n   *\n   * @param {Object|String} docOrId Document or document ID.\n   * @param {String} attachmentName Attachment name.\n   * @param {Object} [query] HTTP query options.\n   * @return This object for chaining.\n   */\n\n  attachment: function (doc, attachmentName /* [query], [headers], [callback] */) {\n    var request = this._(arguments, 2);\n    var path = encodeURIComponent(doc._id || doc.id || doc) + \"/\" + encodeURIComponent(attachmentName);\n    return request(\"GET\", path, options);\n  },\n\n  /**\n   * Upload attachment to document.\n   *\n   * Set the `Content-Type` header.\n   *\n   * @param {Object} [doc] Document. Requires `id`. `rev` can be specified\n   *   here or in `query`.\n   * @param {String} attachmentName Attachment name.\n   * @param {Object} data Data.\n   * @return This object for chaining.\n   */\n\n  attach: function (doc, attachmentName, data /* [query], [headers], [callback] */) {\n    var request = this._(arguments, 3);\n    request.p = encodeURIComponent(doc._id || doc.id) + \"/\" + encodeURIComponent(attachmentName);\n    if (!request.q.rev) request.q.rev = doc._rev || doc.rev;\n    request.q.body = data;\n    return request(\"PUT\", path);\n  },\n\n  /**\n   * Replicate database.\n   *\n   * This convenience function sets `options.source` and `options.target` to\n   * the selected database name. Either `options.source` or `options.target`\n   * must be overridden for a successful replication request.\n   *\n   * @param {Options} options Options. Accepts all options from\n   *   `Client.replicate()`.\n   *   @param {String} [options.source=this.name] Source database URL or\n   *     local name. Defaults to the selected database name if not given.\n   *   @param {String} [options.target=this.name] Target database URL or\n   *     local name. Defaults to the selected database name if not given.\n   * @return This object for chaining.\n   */\n\n  replicate: function (options /* [query], [headers], [callback] */) {\n    if (!options.source) options.source = this.name;\n    if (!options.target) options.target = this.name;\n    return this.client.replicate.apply(this.client, arguments);\n  },\n\n  /**\n   * Ensure recent changes are committed to disk.\n   *\n   * @return This object for chaining.\n   */\n\n  commit: function (/* [query], [headers], [callback] */) {\n    return this._(arguments)(\"POST\", \"_ensure_full_commit\");\n  },\n\n  /**\n   * Purge deleted documents from database.\n   *\n   * @param {Object} revs Map of document IDs to revisions to be purged.\n   * @return This object for chaining.\n   */\n\n  purge: function (revs /* [query], [headers], [callback] */) {\n    return this._(arguments, 1)(\"POST\", \"_purge\", { b: revs });\n  },\n\n  /**\n   * Compact database or design.\n   *\n   * @param {String} [design] Design name if compacting design indexes.\n   * @return This object for chaining.\n   * @see [CouchDB Wiki](http://wiki.apache.org/couchdb/Compaction)\n   */\n\n  compact: function (/* [design], [query], [headers], [callback] */) {\n    var request = this._(arguments);\n    return request(\"POST\", \"_compact/\" + (request.p || \"\"));\n  },\n\n  /**\n   * Remove unused views.\n   *\n   * @return This object for chaining.\n   * @see [CouchDB Wiki](http://wiki.apache.org/couchdb/Compaction)\n   */\n\n  vacuum: function (/* [query], [headers], [callback] */) {\n    return this._(arguments)(\"POST\", \"_view_cleanup\");\n  },\n\n  /**\n   * Parse view options.\n   *\n   * @param {Object} query The HTTP query options.\n   * @param {Object} body The body payload.\n   * @return {Object} The body payload.\n   * @api private\n   */\n\n  _viewOptions: function (q, body) {\n    if (q) {\n      if (q.key) q.key = JSON.stringify(q.key);\n      if (q.startkey) q.startkey = JSON.stringify(q.startkey);\n      if (q.endkey) q.endkey = JSON.stringify(q.endkey);\n      if (q.stale && q.stale != \"update_after\") q.stale = \"ok\";\n      if (q.keys) {\n        if (!body) body = {};\n        body.keys = q.keys;\n        delete q.keys;\n      }\n    }\n    return body;\n  }\n\n});\n\n/**\n * Export clerk.\n */\n\nmodule.exports = clerk;\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n/**\n * Module dependencies.\n */\n\nvar Emitter = __webpack_require__(2);\nvar reduce = __webpack_require__(3);\n\n/**\n * Root reference for iframes.\n */\n\nvar root = 'undefined' == typeof window\n  ? this\n  : window;\n\n/**\n * Noop.\n */\n\nfunction noop(){};\n\n/**\n * Check if `obj` is a host object,\n * we don't want to serialize these :)\n *\n * TODO: future proof, move to compoent land\n *\n * @param {Object} obj\n * @return {Boolean}\n * @api private\n */\n\nfunction isHost(obj) {\n  var str = {}.toString.call(obj);\n\n  switch (str) {\n    case '[object File]':\n    case '[object Blob]':\n    case '[object FormData]':\n      return true;\n    default:\n      return false;\n  }\n}\n\n/**\n * Determine XHR.\n */\n\nfunction getXHR() {\n  if (root.XMLHttpRequest\n    && ('file:' != root.location.protocol || !root.ActiveXObject)) {\n    return new XMLHttpRequest;\n  } else {\n    try { return new ActiveXObject('Microsoft.XMLHTTP'); } catch(e) {}\n    try { return new ActiveXObject('Msxml2.XMLHTTP.6.0'); } catch(e) {}\n    try { return new ActiveXObject('Msxml2.XMLHTTP.3.0'); } catch(e) {}\n    try { return new ActiveXObject('Msxml2.XMLHTTP'); } catch(e) {}\n  }\n  return false;\n}\n\n/**\n * Removes leading and trailing whitespace, added to support IE.\n *\n * @param {String} s\n * @return {String}\n * @api private\n */\n\nvar trim = ''.trim\n  ? function(s) { return s.trim(); }\n  : function(s) { return s.replace(/(^\\s*|\\s*$)/g, ''); };\n\n/**\n * Check if `obj` is an object.\n *\n * @param {Object} obj\n * @return {Boolean}\n * @api private\n */\n\nfunction isObject(obj) {\n  return obj === Object(obj);\n}\n\n/**\n * Serialize the given `obj`.\n *\n * @param {Object} obj\n * @return {String}\n * @api private\n */\n\nfunction serialize(obj) {\n  if (!isObject(obj)) return obj;\n  var pairs = [];\n  for (var key in obj) {\n    if (null != obj[key]) {\n      pairs.push(encodeURIComponent(key)\n        + '=' + encodeURIComponent(obj[key]));\n    }\n  }\n  return pairs.join('&');\n}\n\n/**\n * Expose serialization method.\n */\n\n request.serializeObject = serialize;\n\n /**\n  * Parse the given x-www-form-urlencoded `str`.\n  *\n  * @param {String} str\n  * @return {Object}\n  * @api private\n  */\n\nfunction parseString(str) {\n  var obj = {};\n  var pairs = str.split('&');\n  var parts;\n  var pair;\n\n  for (var i = 0, len = pairs.length; i < len; ++i) {\n    pair = pairs[i];\n    parts = pair.split('=');\n    obj[decodeURIComponent(parts[0])] = decodeURIComponent(parts[1]);\n  }\n\n  return obj;\n}\n\n/**\n * Expose parser.\n */\n\nrequest.parseString = parseString;\n\n/**\n * Default MIME type map.\n *\n *     superagent.types.xml = 'application/xml';\n *\n */\n\nrequest.types = {\n  html: 'text/html',\n  json: 'application/json',\n  xml: 'application/xml',\n  urlencoded: 'application/x-www-form-urlencoded',\n  'form': 'application/x-www-form-urlencoded',\n  'form-data': 'application/x-www-form-urlencoded'\n};\n\n/**\n * Default serialization map.\n *\n *     superagent.serialize['application/xml'] = function(obj){\n *       return 'generated xml here';\n *     };\n *\n */\n\n request.serialize = {\n   'application/x-www-form-urlencoded': serialize,\n   'application/json': JSON.stringify\n };\n\n /**\n  * Default parsers.\n  *\n  *     superagent.parse['application/xml'] = function(str){\n  *       return { object parsed from str };\n  *     };\n  *\n  */\n\nrequest.parse = {\n  'application/x-www-form-urlencoded': parseString,\n  'application/json': JSON.parse\n};\n\n/**\n * Parse the given header `str` into\n * an object containing the mapped fields.\n *\n * @param {String} str\n * @return {Object}\n * @api private\n */\n\nfunction parseHeader(str) {\n  var lines = str.split(/\\r?\\n/);\n  var fields = {};\n  var index;\n  var line;\n  var field;\n  var val;\n\n  lines.pop(); // trailing CRLF\n\n  for (var i = 0, len = lines.length; i < len; ++i) {\n    line = lines[i];\n    index = line.indexOf(':');\n    field = line.slice(0, index).toLowerCase();\n    val = trim(line.slice(index + 1));\n    fields[field] = val;\n  }\n\n  return fields;\n}\n\n/**\n * Return the mime type for the given `str`.\n *\n * @param {String} str\n * @return {String}\n * @api private\n */\n\nfunction type(str){\n  return str.split(/ *; */).shift();\n};\n\n/**\n * Return header field parameters.\n *\n * @param {String} str\n * @return {Object}\n * @api private\n */\n\nfunction params(str){\n  return reduce(str.split(/ *; */), function(obj, str){\n    var parts = str.split(/ *= */)\n      , key = parts.shift()\n      , val = parts.shift();\n\n    if (key && val) obj[key] = val;\n    return obj;\n  }, {});\n};\n\n/**\n * Initialize a new `Response` with the given `xhr`.\n *\n *  - set flags (.ok, .error, etc)\n *  - parse header\n *\n * Examples:\n *\n *  Aliasing `superagent` as `request` is nice:\n *\n *      request = superagent;\n *\n *  We can use the promise-like API, or pass callbacks:\n *\n *      request.get('/').end(function(res){});\n *      request.get('/', function(res){});\n *\n *  Sending data can be chained:\n *\n *      request\n *        .post('/user')\n *        .send({ name: 'tj' })\n *        .end(function(res){});\n *\n *  Or passed to `.send()`:\n *\n *      request\n *        .post('/user')\n *        .send({ name: 'tj' }, function(res){});\n *\n *  Or passed to `.post()`:\n *\n *      request\n *        .post('/user', { name: 'tj' })\n *        .end(function(res){});\n *\n * Or further reduced to a single call for simple cases:\n *\n *      request\n *        .post('/user', { name: 'tj' }, function(res){});\n *\n * @param {XMLHTTPRequest} xhr\n * @param {Object} options\n * @api private\n */\n\nfunction Response(req, options) {\n  options = options || {};\n  this.req = req;\n  this.xhr = this.req.xhr;\n  this.text = this.req.method !='HEAD' \n     ? this.xhr.responseText \n     : null;\n  this.setStatusProperties(this.xhr.status);\n  this.header = this.headers = parseHeader(this.xhr.getAllResponseHeaders());\n  // getAllResponseHeaders sometimes falsely returns \"\" for CORS requests, but\n  // getResponseHeader still works. so we get content-type even if getting\n  // other headers fails.\n  this.header['content-type'] = this.xhr.getResponseHeader('content-type');\n  this.setHeaderProperties(this.header);\n  this.body = this.req.method != 'HEAD'\n    ? this.parseBody(this.text)\n    : null;\n}\n\n/**\n * Get case-insensitive `field` value.\n *\n * @param {String} field\n * @return {String}\n * @api public\n */\n\nResponse.prototype.get = function(field){\n  return this.header[field.toLowerCase()];\n};\n\n/**\n * Set header related properties:\n *\n *   - `.type` the content type without params\n *\n * A response of \"Content-Type: text/plain; charset=utf-8\"\n * will provide you with a `.type` of \"text/plain\".\n *\n * @param {Object} header\n * @api private\n */\n\nResponse.prototype.setHeaderProperties = function(header){\n  // content-type\n  var ct = this.header['content-type'] || '';\n  this.type = type(ct);\n\n  // params\n  var obj = params(ct);\n  for (var key in obj) this[key] = obj[key];\n};\n\n/**\n * Parse the given body `str`.\n *\n * Used for auto-parsing of bodies. Parsers\n * are defined on the `superagent.parse` object.\n *\n * @param {String} str\n * @return {Mixed}\n * @api private\n */\n\nResponse.prototype.parseBody = function(str){\n  var parse = request.parse[this.type];\n  return parse && str && str.length\n    ? parse(str)\n    : null;\n};\n\n/**\n * Set flags such as `.ok` based on `status`.\n *\n * For example a 2xx response will give you a `.ok` of __true__\n * whereas 5xx will be __false__ and `.error` will be __true__. The\n * `.clientError` and `.serverError` are also available to be more\n * specific, and `.statusType` is the class of error ranging from 1..5\n * sometimes useful for mapping respond colors etc.\n *\n * \"sugar\" properties are also defined for common cases. Currently providing:\n *\n *   - .noContent\n *   - .badRequest\n *   - .unauthorized\n *   - .notAcceptable\n *   - .notFound\n *\n * @param {Number} status\n * @api private\n */\n\nResponse.prototype.setStatusProperties = function(status){\n  var type = status / 100 | 0;\n\n  // status / class\n  this.status = status;\n  this.statusType = type;\n\n  // basics\n  this.info = 1 == type;\n  this.ok = 2 == type;\n  this.clientError = 4 == type;\n  this.serverError = 5 == type;\n  this.error = (4 == type || 5 == type)\n    ? this.toError()\n    : false;\n\n  // sugar\n  this.accepted = 202 == status;\n  this.noContent = 204 == status || 1223 == status;\n  this.badRequest = 400 == status;\n  this.unauthorized = 401 == status;\n  this.notAcceptable = 406 == status;\n  this.notFound = 404 == status;\n  this.forbidden = 403 == status;\n};\n\n/**\n * Return an `Error` representative of this response.\n *\n * @return {Error}\n * @api public\n */\n\nResponse.prototype.toError = function(){\n  var req = this.req;\n  var method = req.method;\n  var url = req.url;\n\n  var msg = 'cannot ' + method + ' ' + url + ' (' + this.status + ')';\n  var err = new Error(msg);\n  err.status = this.status;\n  err.method = method;\n  err.url = url;\n\n  return err;\n};\n\n/**\n * Expose `Response`.\n */\n\nrequest.Response = Response;\n\n/**\n * Initialize a new `Request` with the given `method` and `url`.\n *\n * @param {String} method\n * @param {String} url\n * @api public\n */\n\nfunction Request(method, url) {\n  var self = this;\n  Emitter.call(this);\n  this._query = this._query || [];\n  this.method = method;\n  this.url = url;\n  this.header = {};\n  this._header = {};\n  this.on('end', function(){\n    var err = null;\n    var res = null;\n\n    try {\n      res = new Response(self); \n    } catch(e) {\n      err = new Error('Parser is unable to parse the response');\n      err.parse = true;\n      err.original = e;\n    }\n\n    self.callback(err, res);\n  });\n}\n\n/**\n * Mixin `Emitter`.\n */\n\nEmitter(Request.prototype);\n\n/**\n * Allow for extension\n */\n\nRequest.prototype.use = function(fn) {\n  fn(this);\n  return this;\n}\n\n/**\n * Set timeout to `ms`.\n *\n * @param {Number} ms\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.timeout = function(ms){\n  this._timeout = ms;\n  return this;\n};\n\n/**\n * Clear previous timeout.\n *\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.clearTimeout = function(){\n  this._timeout = 0;\n  clearTimeout(this._timer);\n  return this;\n};\n\n/**\n * Abort the request, and clear potential timeout.\n *\n * @return {Request}\n * @api public\n */\n\nRequest.prototype.abort = function(){\n  if (this.aborted) return;\n  this.aborted = true;\n  this.xhr.abort();\n  this.clearTimeout();\n  this.emit('abort');\n  return this;\n};\n\n/**\n * Set header `field` to `val`, or multiple fields with one object.\n *\n * Examples:\n *\n *      req.get('/')\n *        .set('Accept', 'application/json')\n *        .set('X-API-Key', 'foobar')\n *        .end(callback);\n *\n *      req.get('/')\n *        .set({ Accept: 'application/json', 'X-API-Key': 'foobar' })\n *        .end(callback);\n *\n * @param {String|Object} field\n * @param {String} val\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.set = function(field, val){\n  if (isObject(field)) {\n    for (var key in field) {\n      this.set(key, field[key]);\n    }\n    return this;\n  }\n  this._header[field.toLowerCase()] = val;\n  this.header[field] = val;\n  return this;\n};\n\n/**\n * Remove header `field`.\n *\n * Example:\n *\n *      req.get('/')\n *        .unset('User-Agent')\n *        .end(callback);\n *\n * @param {String} field\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.unset = function(field){\n  delete this._header[field.toLowerCase()];\n  delete this.header[field];\n  return this;\n};\n\n/**\n * Get case-insensitive header `field` value.\n *\n * @param {String} field\n * @return {String}\n * @api private\n */\n\nRequest.prototype.getHeader = function(field){\n  return this._header[field.toLowerCase()];\n};\n\n/**\n * Set Content-Type to `type`, mapping values from `request.types`.\n *\n * Examples:\n *\n *      superagent.types.xml = 'application/xml';\n *\n *      request.post('/')\n *        .type('xml')\n *        .send(xmlstring)\n *        .end(callback);\n *\n *      request.post('/')\n *        .type('application/xml')\n *        .send(xmlstring)\n *        .end(callback);\n *\n * @param {String} type\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.type = function(type){\n  this.set('Content-Type', request.types[type] || type);\n  return this;\n};\n\n/**\n * Set Accept to `type`, mapping values from `request.types`.\n *\n * Examples:\n *\n *      superagent.types.json = 'application/json';\n *\n *      request.get('/agent')\n *        .accept('json')\n *        .end(callback);\n *\n *      request.get('/agent')\n *        .accept('application/json')\n *        .end(callback);\n *\n * @param {String} accept\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.accept = function(type){\n  this.set('Accept', request.types[type] || type);\n  return this;\n};\n\n/**\n * Set Authorization field value with `user` and `pass`.\n *\n * @param {String} user\n * @param {String} pass\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.auth = function(user, pass){\n  var str = btoa(user + ':' + pass);\n  this.set('Authorization', 'Basic ' + str);\n  return this;\n};\n\n/**\n* Add query-string `val`.\n*\n* Examples:\n*\n*   request.get('/shoes')\n*     .query('size=10')\n*     .query({ color: 'blue' })\n*\n* @param {Object|String} val\n* @return {Request} for chaining\n* @api public\n*/\n\nRequest.prototype.query = function(val){\n  if ('string' != typeof val) val = serialize(val);\n  if (val) this._query.push(val);\n  return this;\n};\n\n/**\n * Write the field `name` and `val` for \"multipart/form-data\"\n * request bodies.\n *\n * ``` js\n * request.post('/upload')\n *   .field('foo', 'bar')\n *   .end(callback);\n * ```\n *\n * @param {String} name\n * @param {String|Blob|File} val\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.field = function(name, val){\n  if (!this._formData) this._formData = new FormData();\n  this._formData.append(name, val);\n  return this;\n};\n\n/**\n * Queue the given `file` as an attachment to the specified `field`,\n * with optional `filename`.\n *\n * ``` js\n * request.post('/upload')\n *   .attach(new Blob(['<a id=\"a\"><b id=\"b\">hey!</b></a>'], { type: \"text/html\"}))\n *   .end(callback);\n * ```\n *\n * @param {String} field\n * @param {Blob|File} file\n * @param {String} filename\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.attach = function(field, file, filename){\n  if (!this._formData) this._formData = new FormData();\n  this._formData.append(field, file, filename);\n  return this;\n};\n\n/**\n * Send `data`, defaulting the `.type()` to \"json\" when\n * an object is given.\n *\n * Examples:\n *\n *       // querystring\n *       request.get('/search')\n *         .end(callback)\n *\n *       // multiple data \"writes\"\n *       request.get('/search')\n *         .send({ search: 'query' })\n *         .send({ range: '1..5' })\n *         .send({ order: 'desc' })\n *         .end(callback)\n *\n *       // manual json\n *       request.post('/user')\n *         .type('json')\n *         .send('{\"name\":\"tj\"})\n *         .end(callback)\n *\n *       // auto json\n *       request.post('/user')\n *         .send({ name: 'tj' })\n *         .end(callback)\n *\n *       // manual x-www-form-urlencoded\n *       request.post('/user')\n *         .type('form')\n *         .send('name=tj')\n *         .end(callback)\n *\n *       // auto x-www-form-urlencoded\n *       request.post('/user')\n *         .type('form')\n *         .send({ name: 'tj' })\n *         .end(callback)\n *\n *       // defaults to x-www-form-urlencoded\n  *      request.post('/user')\n  *        .send('name=tobi')\n  *        .send('species=ferret')\n  *        .end(callback)\n *\n * @param {String|Object} data\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.send = function(data){\n  var obj = isObject(data);\n  var type = this.getHeader('Content-Type');\n\n  // merge\n  if (obj && isObject(this._data)) {\n    for (var key in data) {\n      this._data[key] = data[key];\n    }\n  } else if ('string' == typeof data) {\n    if (!type) this.type('form');\n    type = this.getHeader('Content-Type');\n    if ('application/x-www-form-urlencoded' == type) {\n      this._data = this._data\n        ? this._data + '&' + data\n        : data;\n    } else {\n      this._data = (this._data || '') + data;\n    }\n  } else {\n    this._data = data;\n  }\n\n  if (!obj) return this;\n  if (!type) this.type('json');\n  return this;\n};\n\n/**\n * Invoke the callback with `err` and `res`\n * and handle arity check.\n *\n * @param {Error} err\n * @param {Response} res\n * @api private\n */\n\nRequest.prototype.callback = function(err, res){\n  var fn = this._callback;\n  this.clearTimeout();\n  if (2 == fn.length) return fn(err, res);\n  if (err) return this.emit('error', err);\n  fn(res);\n};\n\n/**\n * Invoke callback with x-domain error.\n *\n * @api private\n */\n\nRequest.prototype.crossDomainError = function(){\n  var err = new Error('Origin is not allowed by Access-Control-Allow-Origin');\n  err.crossDomain = true;\n  this.callback(err);\n};\n\n/**\n * Invoke callback with timeout error.\n *\n * @api private\n */\n\nRequest.prototype.timeoutError = function(){\n  var timeout = this._timeout;\n  var err = new Error('timeout of ' + timeout + 'ms exceeded');\n  err.timeout = timeout;\n  this.callback(err);\n};\n\n/**\n * Enable transmission of cookies with x-domain requests.\n *\n * Note that for this to work the origin must not be\n * using \"Access-Control-Allow-Origin\" with a wildcard,\n * and also must set \"Access-Control-Allow-Credentials\"\n * to \"true\".\n *\n * @api public\n */\n\nRequest.prototype.withCredentials = function(){\n  this._withCredentials = true;\n  return this;\n};\n\n/**\n * Initiate request, invoking callback `fn(res)`\n * with an instanceof `Response`.\n *\n * @param {Function} fn\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.end = function(fn){\n  var self = this;\n  var xhr = this.xhr = getXHR();\n  var query = this._query.join('&');\n  var timeout = this._timeout;\n  var data = this._formData || this._data;\n\n  // store callback\n  this._callback = fn || noop;\n\n  // state change\n  xhr.onreadystatechange = function(){\n    if (4 != xhr.readyState) return;\n    if (0 == xhr.status) {\n      if (self.aborted) return self.timeoutError();\n      return self.crossDomainError();\n    }\n    self.emit('end');\n  };\n\n  // progress\n  if (xhr.upload) {\n    xhr.upload.onprogress = function(e){\n      e.percent = e.loaded / e.total * 100;\n      self.emit('progress', e);\n    };\n  }\n\n  // timeout\n  if (timeout && !this._timer) {\n    this._timer = setTimeout(function(){\n      self.abort();\n    }, timeout);\n  }\n\n  // querystring\n  if (query) {\n    query = request.serializeObject(query);\n    this.url += ~this.url.indexOf('?')\n      ? '&' + query\n      : '?' + query;\n  }\n\n  // initiate request\n  xhr.open(this.method, this.url, true);\n\n  // CORS\n  if (this._withCredentials) xhr.withCredentials = true;\n\n  // body\n  if ('GET' != this.method && 'HEAD' != this.method && 'string' != typeof data && !isHost(data)) {\n    // serialize stuff\n    var serialize = request.serialize[this.getHeader('Content-Type')];\n    if (serialize) data = serialize(data);\n  }\n\n  // set header fields\n  for (var field in this.header) {\n    if (null == this.header[field]) continue;\n    xhr.setRequestHeader(field, this.header[field]);\n  }\n\n  // send stuff\n  this.emit('request', this);\n  xhr.send(data);\n  return this;\n};\n\n/**\n * Expose `Request`.\n */\n\nrequest.Request = Request;\n\n/**\n * Issue a request:\n *\n * Examples:\n *\n *    request('GET', '/users').end(callback)\n *    request('/users').end(callback)\n *    request('/users', callback)\n *\n * @param {String} method\n * @param {String|Function} url or callback\n * @return {Request}\n * @api public\n */\n\nfunction request(method, url) {\n  // callback\n  if ('function' == typeof url) {\n    return new Request('GET', method).end(url);\n  }\n\n  // url first\n  if (1 == arguments.length) {\n    return new Request('GET', method);\n  }\n\n  return new Request(method, url);\n}\n\n/**\n * GET `url` with optional callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed|Function} data or fn\n * @param {Function} fn\n * @return {Request}\n * @api public\n */\n\nrequest.get = function(url, data, fn){\n  var req = request('GET', url);\n  if ('function' == typeof data) fn = data, data = null;\n  if (data) req.query(data);\n  if (fn) req.end(fn);\n  return req;\n};\n\n/**\n * HEAD `url` with optional callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed|Function} data or fn\n * @param {Function} fn\n * @return {Request}\n * @api public\n */\n\nrequest.head = function(url, data, fn){\n  var req = request('HEAD', url);\n  if ('function' == typeof data) fn = data, data = null;\n  if (data) req.send(data);\n  if (fn) req.end(fn);\n  return req;\n};\n\n/**\n * DELETE `url` with optional callback `fn(res)`.\n *\n * @param {String} url\n * @param {Function} fn\n * @return {Request}\n * @api public\n */\n\nrequest.del = function(url, fn){\n  var req = request('DELETE', url);\n  if (fn) req.end(fn);\n  return req;\n};\n\n/**\n * PATCH `url` with optional `data` and callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed} data\n * @param {Function} fn\n * @return {Request}\n * @api public\n */\n\nrequest.patch = function(url, data, fn){\n  var req = request('PATCH', url);\n  if ('function' == typeof data) fn = data, data = null;\n  if (data) req.send(data);\n  if (fn) req.end(fn);\n  return req;\n};\n\n/**\n * POST `url` with optional `data` and callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed} data\n * @param {Function} fn\n * @return {Request}\n * @api public\n */\n\nrequest.post = function(url, data, fn){\n  var req = request('POST', url);\n  if ('function' == typeof data) fn = data, data = null;\n  if (data) req.send(data);\n  if (fn) req.end(fn);\n  return req;\n};\n\n/**\n * PUT `url` with optional `data` and callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed|Function} data or fn\n * @param {Function} fn\n * @return {Request}\n * @api public\n */\n\nrequest.put = function(url, data, fn){\n  var req = request('PUT', url);\n  if ('function' == typeof data) fn = data, data = null;\n  if (data) req.send(data);\n  if (fn) req.end(fn);\n  return req;\n};\n\n/**\n * Expose `request`.\n */\n\nmodule.exports = request;\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\n/**\n * Expose `Emitter`.\n */\n\nmodule.exports = Emitter;\n\n/**\n * Initialize a new `Emitter`.\n *\n * @api public\n */\n\nfunction Emitter(obj) {\n  if (obj) return mixin(obj);\n};\n\n/**\n * Mixin the emitter properties.\n *\n * @param {Object} obj\n * @return {Object}\n * @api private\n */\n\nfunction mixin(obj) {\n  for (var key in Emitter.prototype) {\n    obj[key] = Emitter.prototype[key];\n  }\n  return obj;\n}\n\n/**\n * Listen on the given `event` with `fn`.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.on =\nEmitter.prototype.addEventListener = function(event, fn){\n  this._callbacks = this._callbacks || {};\n  (this._callbacks[event] = this._callbacks[event] || [])\n    .push(fn);\n  return this;\n};\n\n/**\n * Adds an `event` listener that will be invoked a single\n * time then automatically removed.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.once = function(event, fn){\n  var self = this;\n  this._callbacks = this._callbacks || {};\n\n  function on() {\n    self.off(event, on);\n    fn.apply(this, arguments);\n  }\n\n  on.fn = fn;\n  this.on(event, on);\n  return this;\n};\n\n/**\n * Remove the given callback for `event` or all\n * registered callbacks.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.off =\nEmitter.prototype.removeListener =\nEmitter.prototype.removeAllListeners =\nEmitter.prototype.removeEventListener = function(event, fn){\n  this._callbacks = this._callbacks || {};\n\n  // all\n  if (0 == arguments.length) {\n    this._callbacks = {};\n    return this;\n  }\n\n  // specific event\n  var callbacks = this._callbacks[event];\n  if (!callbacks) return this;\n\n  // remove all handlers\n  if (1 == arguments.length) {\n    delete this._callbacks[event];\n    return this;\n  }\n\n  // remove specific handler\n  var cb;\n  for (var i = 0; i < callbacks.length; i++) {\n    cb = callbacks[i];\n    if (cb === fn || cb.fn === fn) {\n      callbacks.splice(i, 1);\n      break;\n    }\n  }\n  return this;\n};\n\n/**\n * Emit `event` with the given args.\n *\n * @param {String} event\n * @param {Mixed} ...\n * @return {Emitter}\n */\n\nEmitter.prototype.emit = function(event){\n  this._callbacks = this._callbacks || {};\n  var args = [].slice.call(arguments, 1)\n    , callbacks = this._callbacks[event];\n\n  if (callbacks) {\n    callbacks = callbacks.slice(0);\n    for (var i = 0, len = callbacks.length; i < len; ++i) {\n      callbacks[i].apply(this, args);\n    }\n  }\n\n  return this;\n};\n\n/**\n * Return array of callbacks for `event`.\n *\n * @param {String} event\n * @return {Array}\n * @api public\n */\n\nEmitter.prototype.listeners = function(event){\n  this._callbacks = this._callbacks || {};\n  return this._callbacks[event] || [];\n};\n\n/**\n * Check if this emitter has `event` handlers.\n *\n * @param {String} event\n * @return {Boolean}\n * @api public\n */\n\nEmitter.prototype.hasListeners = function(event){\n  return !! this.listeners(event).length;\n};\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\n/**\n * Reduce `arr` with `fn`.\n *\n * @param {Array} arr\n * @param {Function} fn\n * @param {Mixed} initial\n *\n * TODO: combatible error handling?\n */\n\nmodule.exports = function(arr, fn, initial){  \n  var idx = 0;\n  var len = arr.length;\n  var curr = arguments.length == 3\n    ? initial\n    : arr[idx++];\n\n  while (idx < len) {\n    curr = fn.call(null, curr, arr[idx], ++idx, arr);\n  }\n  \n  return curr;\n};\n\n/***/ }\n/******/ ])\n\n\n/** WEBPACK FOOTER **\n ** clerk.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 91edb8746bc89aec9634\n **/","/*!\n\nClerk - CouchDB client for node and the browser.\nCopyright 2012-2015 Michael Phan-Ba\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n*/\n\n/**\n * Module dependencies.\n */\n\nvar request = require(\"superagent\");\n\n/**\n * No-op function.\n */\n\nvar noop = function () {};\n\n/**\n * Copy properties from sources to target.\n *\n * @param {Object} target The target object.\n * @param {Object...} sources The source object.\n * @return {Object} The target object.\n * @api private\n */\n\nvar extend = function (target /* sources.. */) {\n  var source, key, i = 1;\n  while (source = arguments[i++]) {\n    for (key in source) target[key] = source[key];\n  }\n  return target;\n};\n\n/**\n * Stringify value.\n *\n * @param {Object} that That value to stringify.\n * @return {String} The stringifyed value.\n * @api private\n */\n\nvar asString = function (that) {\n  return Object.prototype.toString.call(that);\n};\n\n/**\n * Check if value is a string.\n *\n * @param {Object} that That value to check.\n * @return {Boolean} `true` if string, `false` otherwise.\n * @api private\n */\n\nvar isString = function (that) {\n  return asString(that) == \"[object String]\";\n};\n\n/**\n * Check if value is an object.\n *\n * @param {Object} that That value to check.\n * @return {Boolean} `true` if object, `false` otherwise.\n * @api private\n */\n\nvar isObject = function (that) {\n  return asString(that) == \"[object Object]\";\n};\n\n/**\n * Check if value is an array.\n *\n * @param {Object} that That value to check.\n * @return {Boolean} `true` if array, `false` otherwise.\n * @api private\n */\n\nvar isArray = function (that) {\n  return asString(that) == \"[object Array]\";\n};\n\n/**\n * Check if value is a function.\n *\n * @param {Object} that That value to check.\n * @return {Boolean} `true` if function, `false` otherwise.\n * @api private\n */\n\nvar isFunction = function (that) {\n  return asString(that) == \"[object Function]\";\n};\n\n/**\n * Clerk library entry point.\n *\n * @param {String} servers CouchDB server URI.\n * @return {Client|DB} If a URI path is given, returns a `DB`, otherwise\n *   returns a `Client`.\n * @see [CouchDB Wiki](http://wiki.apache.org/couchdb/)\n * @see [CouchDB Guide](http://guide.couchdb.org/)\n * @see [Couchbase 2.0](http://www.couchbase.com/docs/couchbase-single-server-2.0/)\n */\n\nvar clerk = function (uri) {\n  return clerk.make(uri);\n};\n\n/**\n * Library version.\n */\n\nclerk.version = \"0.7.0-devel\";\n\n/**\n * Default host.\n */\n\nclerk.defaultHost = \"http://127.0.0.1:5984\";\n\n/**\n * Create single CouchDB client.\n *\n * @param {String} uri Fully qualified URI.\n * @return {Client|DB} If `uri` has a path, the last segment of the\n *    path is used as the database name and a `DB` instance is\n *    returned. Otherwise, a `Client` instance is returned.\n */\n\nclerk.make = function (uri) {\n  if (!uri) return new clerk.Client(this.defaultHost);\n\n  uri = clerk._parseURI(uri);\n\n  var db = /\\/*([^\\/]+)\\/*$/.exec(uri.path);\n  if (db) {\n    uri.path = uri.path.substr(0, db.index);\n    db = db[1] && decodeURIComponent(db[1]);\n  }\n\n  var client = new clerk.Client(uri.base + uri.path);\n  return db ? client.db(db) : client;\n};\n\n/**\n * Parse URI.\n *\n * The URI is normalized by removing extra `//` in the path and extracting\n * the authentication component, if present.\n *\n * @param {String} uri Fully qualified URI.\n * @return {String} The normalized URI.\n */\n\nclerk._parseURI = function (uri) {\n  var match;\n\n  if (uri) {\n    if (match = /^(https?:\\/\\/[^\\/]+)([^\\/]+)(.*)\\/*$/.exec(uri)) {\n      return {\n        base: match[1] + match[2].replace(/\\/+/g, \"\\/\"),\n        path: match[3]\n      };\n    }\n  }\n\n  return { base: uri || \"\", path: \"\" };\n};\n\n/**\n * Base prototype for `Client` and `DB`.\n * Encapsulates HTTP methods, JSON handling, and response coersion.\n */\n\nclerk.Base = function () {};\n\nclerk.Base.prototype = {\n\n  /**\n   * Service request and parse JSON response.\n   *\n   * @param {String} [method=\"\"GET\"\"] HTTP method.\n   * @param {String} [path=this.uri] HTTP URI.\n   * @param {Object} [query] HTTP query options.\n   * @param {Object} [body] HTTP body.\n   * @param {Object} [headers] HTTP headers.\n   * @param {Function} [callback] Callback function.\n   *   @param {Error|null} error Error or `null` on success.\n   *   @param {Object} data Response data.\n   *   @param {Integer} status Response status code.\n   *   @param {Object} headers Response headers.\n   * @return This object for chaining.\n   */\n\n  request: function (/* [method], [path], [query], [data], [headers], [callback] */) {\n    var args = [].slice.call(arguments)\n      , callback = isFunction (args[args.length - 1]) && args.pop();\n\n    return this._request({\n      method: args[0],\n      path: args[1],\n      query: args[2],\n      data: args[3],\n      headers: args[4],\n      fn: callback\n    });\n  },\n\n  /**\n   * Internal service request and parse JSON response handler.\n   *\n   * @param {String} options\n   *   @param {String} method HTTP method.\n   *   @param {String} path HTTP URI.\n   *   @param {Object} query HTTP query options.\n   *   @param {Object} data HTTP body data.\n   *   @param {Object} headers HTTP headers.\n   *   @param {Function} fn Callback function.\n   *     @param {Error|null} error Error or `null` on success.\n   *     @param {Object} data Response data.\n   *     @param {Integer} status Response status code.\n   *     @param {Object} headers Response headers.\n   * @api private\n   */\n\n  _request: function (options) {\n    if (!options.method) options.method = \"GET\";\n    if (!options.headers) options.headers = {};\n    options.path = options.path ? \"/\" + options.path : \"\";\n\n    // set default headers\n    if (!(\"Content-Type\" in options.headers)) {\n      options.headers[\"Content-Type\"] = \"application/json\";\n    }\n    if (!(\"Accept\" in options.headers)) {\n      options.headers[\"Accept\"] = \"application/json\";\n    }\n\n    options.uri = this.uri + options.path;\n    options.body = options.data && JSON.stringify(options.data,\n      /^\\/_design/.test(options.path) && this._replacer\n    ) || \"\";\n\n    if (options.auth == null) options.auth = this.auth;\n\n    this._do(options);\n\n    return this;\n  },\n\n  /**\n   * Provider for servicing requests and parsing JSON responses.\n   *\n   * @param {String} options\n   *   @param {String} method HTTP method.\n   *   @param {String} uri HTTP URI.\n   *   @param {Object} query HTTP query options.\n   *   @param {Object} body HTTP body.\n   *   @param {Object} headers HTTP headers.\n   *   @param {Object} auth HTTP authentication.\n   *   @param {Function} fn Callback function.\n   *     @param {Error|null} error Error or `null` on success.\n   *     @param {Object} data Response data.\n   *     @param {Integer} status Response status code.\n   *     @param {Object} headers Response headers.\n   * @api private\n   */\n\n  _do: function (options) {\n    var self = this;\n    var req = request(options.method, options.uri);\n\n    // query string\n    if (options.query) {\n      // ensure query Array values are JSON encoded\n      for (key in options.query) {\n        if (typeof(value = options.query[key]) === \"object\") {\n          options.query[key] = JSON.stringify(value);\n        }\n      }\n      // set query on request\n      req.query(options.query);\n    }\n\n    // if auth passed in as object instead of in uri\n    if (options.auth) req.auth(options.auth);\n\n    // set headers\n    if (options.headers) req.set(options.headers);\n\n    // send body\n    if (options.body) req.send(options.body);\n\n    // send request\n    var fn = options.fn || noop;\n    req.end(function (res) {\n      var err = res.error;\n      var data;\n\n      if (!err) {\n        data = /^head$/i.test(options.method) ? res.header : res.body;\n        if (!data) data = res.text;\n        else if (data.error) err = self._error(data);\n        else data = self._response(data);\n      }\n\n      fn(err || null, data, res.status, res.header, res);\n    });\n  },\n\n  /**\n   * Coerce response to normalize access to `_id` and `_rev`.\n   *\n   * @param {Object} json The response JSON.\n   * @return The coerced JSON.\n   * @api private\n   */\n\n  _response: function (json) {\n    var data = json.rows || json.results || json.uuids || isArray(json) && json\n      , meta = this._meta\n      , i = 0, len, item;\n\n    if (data) {\n      extend(data, json).json = json;\n      for (len = data.length; i < len; i++) {\n        item = data[i] = meta(data[i]);\n        if (item.doc) item.doc = meta(item.doc);\n      }\n    } else {\n      data = meta(json);\n    }\n\n    return data;\n  },\n\n  /**\n   * Make an error out of the response.\n   *\n   * @param {Object} json The response JSON.\n   * @return An `Error` object.\n   * @api private\n   */\n\n  _error: function (json) {\n    var err = new Error(json.reason);\n    err.code = json.error;\n    return extend(err, json);\n  },\n\n  /**\n   * JSON stringify functions. Used for encoding view documents to JSON.\n   *\n   * @param {String} key The key to stringify.\n   * @param {Object} val The value to stringify.\n   * @return {Object} The stringified function value or the value.\n   * @api private\n   */\n\n  _replacer: function (key, val) {\n    return isFunction (val) ? val.toString() : val;\n  },\n\n  /**\n   * Coerce documents with prototypical `_id` and `_rev`\n   * values.\n   *\n   * @param {Object} doc The document to coerce.\n   * @return {Object} The coerced document.\n   * @api private\n   */\n\n  _meta: function (doc) {\n    var hasId = !doc._id && doc.id\n      , hasRev = !doc._rev && doc.rev\n      , proto;\n\n    if (hasId || hasRev) {\n      proto = function (){};\n      doc = extend(new proto(), doc);\n      proto = proto.prototype;\n      if (hasId) proto._id = doc.id;\n      if (hasRev) proto._rev = doc.rev;\n    }\n\n    return doc;\n  },\n\n  /**\n   * HTTP headers to parse.\n   *\n   * @api private\n   */\n\n  _headers: [\n    \"cache-control\",\n    \"content-length\",\n    \"content-type\",\n    \"date\",\n    \"etag\",\n    \"server\"\n  ],\n\n  /**\n   * Parse arguments.\n   *\n   * @param {Array} args The arguments.\n   * @param {Integer} start The index from which to start reading arguments.\n   * @param {Boolean} withDoc Set to `true` if the doc source is given as a\n   *   parameter before HTTP query options.\n   * @return This object for chaining.\n   * @api private\n   */\n\n  _: function (args, start, withDoc) {\n    var self = this, doc, id, rev;\n\n    function request(method, path, options) {\n      if (!options) options = {};\n      return self._request({\n        method: method,\n        path: path || request.p,\n        query: options.q || request.q,\n        data: options.b || request.b,\n        headers: options.h || request.h,\n        fn: options.f || request.f,\n        state: request\n      });\n    }\n\n    // [id], [doc], [query], [header], [callback]\n    args = [].slice.call(args, start || 0);\n\n    request.f = isFunction (args[args.length - 1]) && args.pop();\n    request.p = isString(args[0]) && encodeURI(args.shift());\n    request.q = args[withDoc ? 1 : 0] || {};\n    request.h = args[withDoc ? 2 : 1] || {};\n\n    if (withDoc) {\n      if (doc = (request.b = args[0])) {\n        if (id = request.p || doc._id || doc.id) request.p = id;\n        if (rev = request.q.rev || doc._rev || doc.rev) request.q.rev = rev;\n      }\n    }\n\n    return request;\n  }\n\n};\n\n/**\n * Clerk CouchDB client.\n *\n * @param {String} uri Fully qualified URI.\n * @param {Object} [auth] Authentication options.\n *   @param {String} [auth.user] Username.\n *   @param {String} [auth.pass] Password.\n * @see [CouchDB Wiki](http://wiki.apache.org/couchdb/Complete_HTTP_API_Reference)\n */\n\nclerk.Client = function (uri) {\n  this.uri = uri;\n  this._db = {};\n};\n\nclerk.Client.prototype = extend(new clerk.Base(), {\n\n  /**\n   * Select database to manipulate.\n   *\n   * @param {String} name DB name.\n   * @return {DB} DB object.\n   */\n\n  db: function (name) {\n    var db = this._db;\n    return db[name] || (db[name] = new clerk.DB(this, name, this.auth));\n  },\n\n  /**\n   * List all databases.\n   *\n   * @return This object for chaining.\n   * @see [CouchDB Wiki](http://wiki.apache.org/couchdb/HttpGetAllDbs)\n   */\n\n  dbs: function (/* [query], [headers], [callback] */) {\n    return this._(arguments)(\"GET\", \"_all_dbs\");\n  },\n\n  /**\n   * Get UUIDs.\n   *\n   * @param {Integer} [count=1] Number of UUIDs to get.\n   * @return This object for chaining.\n   * @see [CouchDB Wiki](http://wiki.apache.org/couchdb/HttpGetUuids)\n   */\n\n  uuids: function (count /* [query], [headers], [callback] */) {\n    var request = this._(arguments, +count == count ? 1 : 0);\n    if (count > 1) request.q.count = count;\n    return request(\"GET\", \"_uuids\");\n  },\n\n  /**\n   * Get server information.\n   *\n   * @return This object for chaining.\n   * @see [CouchDB Wiki](http://wiki.apache.org/couchdb/HttpGetRoot)\n   */\n\n  info: function (/* [query], [headers], [callback] */) {\n    return this._(arguments)(\"GET\");\n  },\n\n  /**\n   * Get server stats.\n   *\n   * @return This object for chaining.\n   * @see [CouchDB Wiki](http://wiki.apache.org/couchdb/HttpGetLog)\n   */\n\n  stats: function (/* [query], [headers], [callback] */) {\n    return this._(arguments)(\"GET\", \"_stats\");\n  },\n\n  /**\n   * Get tail of the server log file.\n   *\n   * @param {Object} [query] Query parameters.\n   *   @param {Integer} [query.bytes=1000] Number of bytes to read.\n   *   @param {Integer} [query.offset=0] Number of bytes from the end of\n   *     log file to start reading.\n   * @return This object for chaining.\n   * @see [CouchDB Wiki](http://wiki.apache.org/couchdb/HttpGetLog)\n   */\n\n  log: function (/* [query], [headers], [callback] */) {\n    var request = this._(arguments), callback = request.f;\n\n    if (!callback) return this;\n\n    request.f = function (e) {\n      if (e instanceof SyntaxError) e = null;\n      callback.apply(this, arguments);\n    };\n    return request(\"GET\", \"_log\");\n  },\n\n  /**\n   * List running tasks.\n   *\n   * @return This object for chaining.\n   * @see [CouchDB Wiki](http://wiki.apache.org/couchdb/HttpGetActiveTasks)\n   */\n\n  tasks: function (/* [query], [headers], [callback] */) {\n    return this._(arguments)(\"GET\", \"_active_tasks\");\n  },\n\n  /**\n   * Get or set configuration values.\n   *\n   * @param {String} [key] Configuration section or key.\n   * @param {String} [value] Configuration value.\n   * @return This object for chaining.\n   */\n\n  config: function (/* [key], [value], [query], [headers], [callback] */) {\n    var args = [].slice.call(arguments)\n      , key = isString(args[0]) && args.shift() || \"\"\n      , value = isString(args[0]) && args.shift()\n      , method = isString(value) ? \"PUT\" : \"GET\";\n    return this._(args)(method, \"_config/\" + key, { b: value });\n  },\n\n  /**\n   * Replicate databases.\n   *\n   * @param {Object} options Options.\n   *   @param {String} options.source Source database URL or local name.\n   *   @param {String} options.target Target database URL or local name.\n   *   @param {Boolean} [options.cancel] Set to `true` to cancel replication.\n   *   @param {Boolean} [options.continuous] Set to `true` for continuous\n   *     replication.\n   *   @param {Boolean} [options.create_target] Set to `true` to create the\n   *     target database.\n   *   @param {String} [options.filter] Filter name for filtered replication.\n   *     Example: \"mydesign/myfilter\".\n   *   @param {Object} [options.query] Query parameters for filter.\n   *   @param {String[]} [options.doc_ids] Document IDs to replicate.\n   *   @param {String} [options.proxy] Proxy through which to replicate.\n   * @return This object for chaining.\n   * @see [CouchDB Wiki](http://wiki.apache.org/couchdb/Replication)\n   */\n\n  replicate: function (options /* [query], [headers], [callback] */) {\n    return this._(arguments, 1)(\"POST\", \"_replicate\", { b: options });\n  }\n\n});\n\n/**\n * Methods for CouchDB database.\n *\n * @param {Client} client Clerk client.\n * @param {String} name DB name.\n * @param {Object} [auth] Authentication options.\n *   @param {String} [auth.user] Username.\n *   @param {String} [auth.pass] Password.\n * @return This object for chaining.\n */\n\nclerk.DB = function (client, name, auth) {\n  this.client = client;\n  this.name = name;\n  this.uri = client.uri + \"/\" + encodeURIComponent(name);\n  this.auth = auth;\n};\n\nclerk.DB.prototype = extend(new clerk.Base(), {\n\n  /**\n   * Create database.\n   *\n   * @return This object for chaining.\n   */\n\n  create: function (/* [query], [headers], [callback] */) {\n    return this._(arguments)(\"PUT\");\n  },\n\n  /**\n   * Destroy database.\n   *\n   * @return This object for chaining.\n   */\n\n  destroy: function (/* [query], [headers], [callback] */) {\n    return this._(arguments)(\"DELETE\");\n  },\n\n  /**\n   * Get database info.\n   *\n   * @return This object for chaining.\n   */\n\n  info: function (/* [query], [headers], callback */) {\n    return this._(arguments)(\"GET\");\n  },\n\n  /**\n   * Check if database exists.\n   *\n   * @return This object for chaining.\n   */\n\n  exists: function (/* [query], [headers], callback */) {\n    var request = this._(arguments), callback = request.f;\n\n    if (!callback) return this;\n\n    request.f = function (err, body, status, headers, xhr) {\n      callback(err, status === 200, status, headers, xhr);\n    };\n\n    return request(\"HEAD\");\n  },\n\n  /**\n   * Fetch document.\n   *\n   * Set `rev` in `query`.\n   *\n   * @param {String} id Document ID.\n   * @param {Object} [query] HTTP query options.\n   *   @param {Boolean} [query.revs] Fetch list of revisions.\n   *   @param {Boolean} [query.revs_info] Fetch detailed revision information.\n   * @param {Function} callback Callback function.\n   *   @param {Error|null} error Error or `null` on success.\n   *   @param {Object} data Response data.\n   *   @param {Integer} status Response status code.\n   * @return This object for chaining.\n   * @see [CouchDB Wiki](http://wiki.apache.org/couchdb/HTTP_Document_API#GET)\n   */\n\n  get: function (/* [id], [query], [headers], [callback] */) {\n    return this._(arguments)(\"GET\");\n  },\n\n  /**\n   * Get document metadata.\n   *\n   * @param {String} id Document ID.\n   * @param {Object} [query] HTTP query options.\n   * @param {Function} callback Callback function.\n   *   @param {Error|null} callback.error Error or `null` on success.\n   *   @param {Object|Object[]} [callback.body] Document metadata or array\n   *     of document metadata.\n   *     @param result.id Document ID.\n   *     @param result.rev Document revision.\n   *     @param [result.contentType] MIME content type. Only available when\n   *       getting metadata for single document.\n   *     @param [result.contentLength] Content length. Only available when\n   *       getting metadata for single document.\n   * @return This object for chaining.\n   * @see [CouchDB Wiki](http://wiki.apache.org/couchdb/HTTP_Document_API#HEAD)\n   */\n\n  head: function (/* [id], [query], [headers], callback */) {\n    var self = this\n      , request = self._(arguments), callback = request.f\n      , id = request.p;\n\n    if (!callback) return this;\n\n    request.f = function (err, body, status, headers, xhr) {\n      callback(err, err ? body : self._meta({\n        _id: id,\n        _rev: headers.etag && JSON.parse(headers.etag),\n        contentType: headers[\"content-type\"],\n        contentLength: headers[\"content-length\"]\n      }), status, headers, xhr);\n    };\n\n    return request(\"HEAD\");\n  },\n\n  /**\n   * Post document(s) to database.\n   *\n   * If documents have no ID, a document ID will be automatically generated\n   * on the server. If attachments are given, they will be automatically\n   * Base64 encoded. Streamed attachments are not supported. Attachments are\n   * only supported on Node.js.\n   *\n   * @param {Object} doc Document.\n   *   @param {String} [doc._id] Document ID. If set, uses given document ID.\n   *   @param {String} [doc._rev] Document revision. If set, allows update to\n   *     existing document.\n   *   @param {Object} [doc._attachments] Attachments. If given, must be a\n   *     map of filenames to attachment properties.\n   *     @param {String} [doc._attachments[filename]] Attachment filename, as\n   *       hash key.\n   *     @param {String} [doc._attachments[filename].contentType] Attachment\n   *       MIME content type.\n   *     @param {String|Object} [doc._attachments[filename].data] Attachment\n   *       data. Will be Base64 encoded.\n   * @param {Object} [query] HTTP query options.\n   *   @param {Boolean} [query.batch] Allow server to write document in\n   *     batch mode. Documents will not be written to disk immediately,\n   *     increasing the chances of write failure.\n   *   @param {Boolean} [query.all_or_nothing] For batch updating of\n   *     documents, use all-or-nothing semantics.\n   * @return This object for chaining.\n   * @see [CouchDB Wiki](http://wiki.apache.org/couchdb/HTTP_Document_API#POST)\n   * @see [CouchDB Wiki](http://wiki.apache.org/couchdb/HTTP_Bulk_Document_API)\n   */\n\n  post: function (docs /* [query], [headers], [callback] */) {\n    var request = this._(arguments, 1);\n    if (isArray(docs)) {\n      var callback = request.f;\n\n      request.p = \"_bulk_docs\";\n      request.b = extend({ docs: docs }, request.q);\n      request.q = null\n\n      // CouchDB older than 1.2 are missing the ok: true property\n      if (callback) request.f = function (err, body) {\n        if (!err) {\n          var i = 0, len = body.length, doc;\n          for (; i < len; i++) {\n            doc = body[i];\n            if (!doc.error) doc.ok = true;\n          }\n        }\n        callback.apply(this, arguments);\n      };\n    } else {\n      request.b = docs;\n    }\n    return request(\"POST\");\n  },\n\n  /**\n   * Put document in database.\n   *\n   * @param {Object} doc Document data. Requires `id` and `rev`.\n   * @param {String} [options] Options.\n   * @return This object for chaining.\n   * @see [CouchDB Wiki](http://wiki.apache.org/couchdb/HTTP_Document_API#PUT)\n   */\n\n  put: function (/* [id], [doc], [query], [headers], [callback] */) {\n    var request = this._(arguments, 0, 1);\n    // prevent acidentally creating database\n    if (!request.p) request.p = request.b._id || request.b.id;\n    if (!request.p) throw new Error(\"missing id\");\n    return request(\"PUT\");\n  },\n\n  /**\n   * Delete document(s).\n   *\n   * @param {String} doc Document or document ID.\n   * @param {Object} [query] HTTP query options.\n   * @return This object for chaining.\n   * @see [CouchDB Wiki](http://wiki.apache.org/couchdb/HTTP_Document_API#DELETE)\n   * @see [CouchDB Wiki](http://wiki.apache.org/couchdb/HTTP_Bulk_Document_API)\n   */\n\n  del: function (docs /* [query], [headers], [callback] */) {\n    if (isArray(docs)) {\n      var i = 0, len = docs.length, doc;\n      for (; i < len; i++) {\n        doc = docs[i], docs[i] = {\n          _id: doc._id || doc.id,\n          _rev: doc._rev || doc.rev,\n          _deleted: true\n        };\n      }\n      return this.post.apply(this, arguments);\n    } else {\n      var request = this._(arguments, 0, 1);\n      // prevent acidentally deleting database\n      if (!request.p) throw new Error(\"missing id\");\n      return request(\"DELETE\");\n    }\n  },\n\n  /**\n   * Copy document.\n   *\n   * @param {Object} source Source document.\n   *   @param {String} source.id Source document ID.\n   *   @param {String} [source.rev] Source document revision.\n   *   @param {String} [source._id] Source document ID. Alternate key for\n   *     `source.id`.\n   *   @param {String} [source._rev] Source document revision. Alternate key\n   *     for `source.id`.\n   * @param {Object} target Target document.\n   *   @param {String} target.id Target document ID.\n   *   @param {String} [target.rev] Target document revision.\n   *   @param {String} [target._id] Target document ID. Alternate key for\n   *     `target.id`.\n   *   @param {String} [target._rev] Target document revision. Alternate key\n   *     for `target.id`.\n   * @param {Object} [query] HTTP query options.\n   * @return This object for chaining.\n   * @see [CouchDB Wiki](http://wiki.apache.org/couchdb/HTTP_Document_API#COPY)\n   */\n\n  copy: function (source, target /* [query], [headers], [callback] */) {\n    var request = this._(arguments, 2)\n      , sourcePath = encodeURIComponent(source.id || source._id || source)\n      , targetPath = encodeURIComponent(target.id || target._id || target)\n      , sourceRev = source.rev || source._rev\n      , targetRev = target.rev || target._rev\n      , callback = request.f;\n\n    if (sourceRev) request.q.rev = sourceRev;\n    if (targetRev) targetPath += \"?rev=\" + encodeURIComponent(targetRev);\n\n    request.h.Destination = targetPath;\n\n    // CouchDB older than 1.2 are missing the ok: true property\n    // https://issues.apache.org/jira/browse/COUCHDB-903\n    if (callback) request.f = function (err, body) {\n      if (!err) body.ok = true;\n      callback.apply(this, arguments);\n    };\n\n    return request(\"COPY\", sourcePath);\n  },\n\n  /**\n   * Query all documents by ID.\n   *\n   * @param {Object} [query] HTTP query options.\n   *   @param {JSON} [query.startkey] Start returning results from this\n   *     document ID.\n   *   @param {JSON} [query.endkey] Stop returning results at this document\n   *     ID.\n   *   @param {Integer} [query.limit] Limit number of results returned.\n   *   @param {Boolean} [query.descending=false] Lookup results in reverse\n   *     order by key, returning documents in descending order by key.\n   *   @param {Integer} [query.skip] Skip this many records before\n   *     returning results.\n   *   @param {Boolean} [query.include_docs=false] Include document source for\n   *     each result.\n   *   @param {Boolean} [query.include_end=true] Include `query.endkey`\n   *     in results.\n   *   @param {Boolean} [query.update_seq=false] Include sequence value\n   *     of the database corresponding to the view.\n   * @return This object for chaining.\n   * @see [CouchDB Wiki](http://wiki.apache.org/couchdb/HTTP_Bulk_Document_API)\n   */\n\n  all: function (/* [query], [headers], [callback] */) {\n    var request = this._(arguments)\n      , body = this._viewOptions(request.q);\n    return request(body ? \"POST\" : \"GET\", \"_all_docs\", { b: body });\n  },\n\n  /**\n   * Query a view.\n   *\n   * @param {String|Object} view View name (e.g. mydesign/myview) or\n   *   temporary view definition. Using a temporary view is strongly not\n   *   recommended for production use.\n   * @param {Object} [query] HTTP query options.\n   *   @param {JSON} [query.key] Key to lookup.\n   *   @param {JSON} [query.startkey] Start returning results from this key.\n   *   @param {String} [query.startkey_docid] Start returning results\n   *     from this document ID. Allows pagination with duplicate keys.\n   *   @param {JSON} [query.endkey] Stop returning results at this key.\n   *   @param {String} [query.endkey_docid] Stop returning results at\n   *     this document ID. Allows pagination with duplicate keys.\n   *   @param {Integer} [query.limit] Limit number of results returned.\n   *   @param {Boolean|String} [query.stale] Do not refresh view even if\n   *     stale. For CouchDB versions `1.1.0` and up, set to `update_after` to\n   *     update view after results are returned.\n   *   @param {Boolean} [query.descending=false] Lookup results in reverse\n   *     order by key, returning documents in descending order by key.\n   *   @param {Integer} [query.skip] Skip this many records before\n   *     returning results.\n   *   @param {Boolean|Integer} [query.group=false] Use the reduce function\n   *     to group results by key. Set to an integer specify `group_level`.\n   *   @param {Boolean|Integer} [query.reduce=true] Use the reduce function.\n   *   @param {Boolean} [query.fetch=false] Include document source for\n   *     each result.\n   *   @param {Boolean} [query.include_end=true] Include `query.endkey`\n   *     in results.\n   *   @param {Boolean} [query.update_seq=false] Include sequence value\n   *     of the database corresponding to the view.\n   * @return This object for chaining.\n   * @see [CouchDB Wiki](http://wiki.apache.org/couchdb/HTTP_view_API)\n   */\n\n  find: function (view /* [query], [headers], [callback] */) {\n    var request = this._(arguments, 1), path, body;\n\n    if (isString(view)) {\n      path = view.split(\"/\", 2);\n      path = \"_design/\" + encodeURIComponent(path[0]) + \"/_view/\" + encodeURIComponent(path[1]);\n    } else {\n      path = \"_temp_view\";\n      body = view;\n    }\n\n    body = this._viewOptions(request.q, body);\n    return request(body ? \"POST\" : \"GET\", path, { b: body });\n  },\n\n  /**\n   * Get database changes.\n   *\n   * The `feed` option determines how the callback is called:\n   *\n   *   - `normal` calls the callback once.\n   *   - `longpoll` waits for a response, then calls the callback once.\n   *   - `continuous` calls the callback each time an update is received.\n   *     Implemented as the `database#follow()` method.\n   *\n   * @param {Object} [query] HTTP query options.\n   *   @param {String} [query.feed=\"normal\"] Type of feed. See comments\n   *     above.\n   *   @param {String} [query.filter] Filter updates using this filter.\n   *   @param {Integer} [query.limit] Maximum number of rows to return.\n   *   @param {Integer} [query.since=0] Start results from this sequence\n   *     number.\n   *   @param {Boolean} [query.include_docs=false] Include documents with\n   *     results.\n   *   @param {Integer} [query.timeout=1000] Maximum period in milliseconds\n   *     to wait for a change before sending a response, even if there are no\n   *     results.\n   *   @param {Integer} [query.heartbeat=1000] Period in milliseconds after\n   *     which an empty line is sent. Applicable only to feed types\n   *     `longpoll` and `continuous`. Overrides `query.timeout` to keep the\n   *     feed alive indefinitely.\n   * @return This object for chaining.\n   * @see [CouchDB Wiki](http://wiki.apache.org/couchdb/HTTP_database_API#Changes)\n   */\n\n  changes: function (/* [query], [headers], [callback] */) {\n    var request = this._(arguments);\n    if (request.q.feed != \"longpoll\") delete request.q.feed;\n    return this._changes(request);\n  },\n\n  /**\n   * Get database changes.\n   *\n   * @see `#changes()`.\n   */\n\n  follow: function (/* [query], [headers], callback */) {\n    var request = this._(arguments)\n      , callback = request.f;\n\n    if (!callback) return this;\n\n    request.q.feed = \"longpoll\";\n    request.f = function (err, doc) {\n      var body = doc, i = 0, len = doc.length, stop;\n      for (; i < len; i++) {\n        doc = body[i];\n        if (stop = callback.apply(this, arguments) === false || err) break;\n      }\n      if (!stop) this._changes(request);\n    };\n\n    return this._changes(request);\n  },\n\n  /**\n   * Service a changes request.\n   *\n   * @api private\n   */\n\n  _changes: function (request) {\n    return request(\"GET\", \"_changes\");\n  },\n\n  /**\n   * Update document using server-side handler.\n   *\n   * @param {String} handler Update handler. Example: mydesign/myhandler\n   * @param {String} [id] Document ID.\n   * @param {Object} [query] HTTP query options.\n   * @param {Object|String} [data] Data.\n   * @param {Object} [headers] Headers.\n   * @return This object for chaining.\n   * @see [CouchDB Wiki](http://wiki.apache.org/couchdb/Document_Update_Handlers)\n   */\n\n  update: function (handler /* [id], [query], [data], [headers], [callback] */) {\n    var request = this._(arguments, 1, 1)\n      , path = handler.split(\"/\", 2);\n\n    path = \"_design/\" + encodeURIComponent(path[0]) + \"/_update/\" + encodeURIComponent(path[1]);\n    if (request.p) path += \"/\" + request.p;\n\n    return request(request.p ? \"PUT\" : \"POST\", path, {\n      q: request.b,\n      b: request.q\n    });\n  },\n\n  /**\n   * Download attachment from document.\n   *\n   * @param {Object|String} docOrId Document or document ID.\n   * @param {String} attachmentName Attachment name.\n   * @param {Object} [query] HTTP query options.\n   * @return This object for chaining.\n   */\n\n  attachment: function (doc, attachmentName /* [query], [headers], [callback] */) {\n    var request = this._(arguments, 2);\n    var path = encodeURIComponent(doc._id || doc.id || doc) + \"/\" + encodeURIComponent(attachmentName);\n    return request(\"GET\", path, options);\n  },\n\n  /**\n   * Upload attachment to document.\n   *\n   * Set the `Content-Type` header.\n   *\n   * @param {Object} [doc] Document. Requires `id`. `rev` can be specified\n   *   here or in `query`.\n   * @param {String} attachmentName Attachment name.\n   * @param {Object} data Data.\n   * @return This object for chaining.\n   */\n\n  attach: function (doc, attachmentName, data /* [query], [headers], [callback] */) {\n    var request = this._(arguments, 3);\n    request.p = encodeURIComponent(doc._id || doc.id) + \"/\" + encodeURIComponent(attachmentName);\n    if (!request.q.rev) request.q.rev = doc._rev || doc.rev;\n    request.q.body = data;\n    return request(\"PUT\", path);\n  },\n\n  /**\n   * Replicate database.\n   *\n   * This convenience function sets `options.source` and `options.target` to\n   * the selected database name. Either `options.source` or `options.target`\n   * must be overridden for a successful replication request.\n   *\n   * @param {Options} options Options. Accepts all options from\n   *   `Client.replicate()`.\n   *   @param {String} [options.source=this.name] Source database URL or\n   *     local name. Defaults to the selected database name if not given.\n   *   @param {String} [options.target=this.name] Target database URL or\n   *     local name. Defaults to the selected database name if not given.\n   * @return This object for chaining.\n   */\n\n  replicate: function (options /* [query], [headers], [callback] */) {\n    if (!options.source) options.source = this.name;\n    if (!options.target) options.target = this.name;\n    return this.client.replicate.apply(this.client, arguments);\n  },\n\n  /**\n   * Ensure recent changes are committed to disk.\n   *\n   * @return This object for chaining.\n   */\n\n  commit: function (/* [query], [headers], [callback] */) {\n    return this._(arguments)(\"POST\", \"_ensure_full_commit\");\n  },\n\n  /**\n   * Purge deleted documents from database.\n   *\n   * @param {Object} revs Map of document IDs to revisions to be purged.\n   * @return This object for chaining.\n   */\n\n  purge: function (revs /* [query], [headers], [callback] */) {\n    return this._(arguments, 1)(\"POST\", \"_purge\", { b: revs });\n  },\n\n  /**\n   * Compact database or design.\n   *\n   * @param {String} [design] Design name if compacting design indexes.\n   * @return This object for chaining.\n   * @see [CouchDB Wiki](http://wiki.apache.org/couchdb/Compaction)\n   */\n\n  compact: function (/* [design], [query], [headers], [callback] */) {\n    var request = this._(arguments);\n    return request(\"POST\", \"_compact/\" + (request.p || \"\"));\n  },\n\n  /**\n   * Remove unused views.\n   *\n   * @return This object for chaining.\n   * @see [CouchDB Wiki](http://wiki.apache.org/couchdb/Compaction)\n   */\n\n  vacuum: function (/* [query], [headers], [callback] */) {\n    return this._(arguments)(\"POST\", \"_view_cleanup\");\n  },\n\n  /**\n   * Parse view options.\n   *\n   * @param {Object} query The HTTP query options.\n   * @param {Object} body The body payload.\n   * @return {Object} The body payload.\n   * @api private\n   */\n\n  _viewOptions: function (q, body) {\n    if (q) {\n      if (q.key) q.key = JSON.stringify(q.key);\n      if (q.startkey) q.startkey = JSON.stringify(q.startkey);\n      if (q.endkey) q.endkey = JSON.stringify(q.endkey);\n      if (q.stale && q.stale != \"update_after\") q.stale = \"ok\";\n      if (q.keys) {\n        if (!body) body = {};\n        body.keys = q.keys;\n        delete q.keys;\n      }\n    }\n    return body;\n  }\n\n});\n\n/**\n * Export clerk.\n */\n\nmodule.exports = clerk;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/clerk.js\n ** module id = 0\n ** module chunks = 0\n **/","/**\n * Module dependencies.\n */\n\nvar Emitter = require('emitter');\nvar reduce = require('reduce');\n\n/**\n * Root reference for iframes.\n */\n\nvar root = 'undefined' == typeof window\n  ? this\n  : window;\n\n/**\n * Noop.\n */\n\nfunction noop(){};\n\n/**\n * Check if `obj` is a host object,\n * we don't want to serialize these :)\n *\n * TODO: future proof, move to compoent land\n *\n * @param {Object} obj\n * @return {Boolean}\n * @api private\n */\n\nfunction isHost(obj) {\n  var str = {}.toString.call(obj);\n\n  switch (str) {\n    case '[object File]':\n    case '[object Blob]':\n    case '[object FormData]':\n      return true;\n    default:\n      return false;\n  }\n}\n\n/**\n * Determine XHR.\n */\n\nfunction getXHR() {\n  if (root.XMLHttpRequest\n    && ('file:' != root.location.protocol || !root.ActiveXObject)) {\n    return new XMLHttpRequest;\n  } else {\n    try { return new ActiveXObject('Microsoft.XMLHTTP'); } catch(e) {}\n    try { return new ActiveXObject('Msxml2.XMLHTTP.6.0'); } catch(e) {}\n    try { return new ActiveXObject('Msxml2.XMLHTTP.3.0'); } catch(e) {}\n    try { return new ActiveXObject('Msxml2.XMLHTTP'); } catch(e) {}\n  }\n  return false;\n}\n\n/**\n * Removes leading and trailing whitespace, added to support IE.\n *\n * @param {String} s\n * @return {String}\n * @api private\n */\n\nvar trim = ''.trim\n  ? function(s) { return s.trim(); }\n  : function(s) { return s.replace(/(^\\s*|\\s*$)/g, ''); };\n\n/**\n * Check if `obj` is an object.\n *\n * @param {Object} obj\n * @return {Boolean}\n * @api private\n */\n\nfunction isObject(obj) {\n  return obj === Object(obj);\n}\n\n/**\n * Serialize the given `obj`.\n *\n * @param {Object} obj\n * @return {String}\n * @api private\n */\n\nfunction serialize(obj) {\n  if (!isObject(obj)) return obj;\n  var pairs = [];\n  for (var key in obj) {\n    if (null != obj[key]) {\n      pairs.push(encodeURIComponent(key)\n        + '=' + encodeURIComponent(obj[key]));\n    }\n  }\n  return pairs.join('&');\n}\n\n/**\n * Expose serialization method.\n */\n\n request.serializeObject = serialize;\n\n /**\n  * Parse the given x-www-form-urlencoded `str`.\n  *\n  * @param {String} str\n  * @return {Object}\n  * @api private\n  */\n\nfunction parseString(str) {\n  var obj = {};\n  var pairs = str.split('&');\n  var parts;\n  var pair;\n\n  for (var i = 0, len = pairs.length; i < len; ++i) {\n    pair = pairs[i];\n    parts = pair.split('=');\n    obj[decodeURIComponent(parts[0])] = decodeURIComponent(parts[1]);\n  }\n\n  return obj;\n}\n\n/**\n * Expose parser.\n */\n\nrequest.parseString = parseString;\n\n/**\n * Default MIME type map.\n *\n *     superagent.types.xml = 'application/xml';\n *\n */\n\nrequest.types = {\n  html: 'text/html',\n  json: 'application/json',\n  xml: 'application/xml',\n  urlencoded: 'application/x-www-form-urlencoded',\n  'form': 'application/x-www-form-urlencoded',\n  'form-data': 'application/x-www-form-urlencoded'\n};\n\n/**\n * Default serialization map.\n *\n *     superagent.serialize['application/xml'] = function(obj){\n *       return 'generated xml here';\n *     };\n *\n */\n\n request.serialize = {\n   'application/x-www-form-urlencoded': serialize,\n   'application/json': JSON.stringify\n };\n\n /**\n  * Default parsers.\n  *\n  *     superagent.parse['application/xml'] = function(str){\n  *       return { object parsed from str };\n  *     };\n  *\n  */\n\nrequest.parse = {\n  'application/x-www-form-urlencoded': parseString,\n  'application/json': JSON.parse\n};\n\n/**\n * Parse the given header `str` into\n * an object containing the mapped fields.\n *\n * @param {String} str\n * @return {Object}\n * @api private\n */\n\nfunction parseHeader(str) {\n  var lines = str.split(/\\r?\\n/);\n  var fields = {};\n  var index;\n  var line;\n  var field;\n  var val;\n\n  lines.pop(); // trailing CRLF\n\n  for (var i = 0, len = lines.length; i < len; ++i) {\n    line = lines[i];\n    index = line.indexOf(':');\n    field = line.slice(0, index).toLowerCase();\n    val = trim(line.slice(index + 1));\n    fields[field] = val;\n  }\n\n  return fields;\n}\n\n/**\n * Return the mime type for the given `str`.\n *\n * @param {String} str\n * @return {String}\n * @api private\n */\n\nfunction type(str){\n  return str.split(/ *; */).shift();\n};\n\n/**\n * Return header field parameters.\n *\n * @param {String} str\n * @return {Object}\n * @api private\n */\n\nfunction params(str){\n  return reduce(str.split(/ *; */), function(obj, str){\n    var parts = str.split(/ *= */)\n      , key = parts.shift()\n      , val = parts.shift();\n\n    if (key && val) obj[key] = val;\n    return obj;\n  }, {});\n};\n\n/**\n * Initialize a new `Response` with the given `xhr`.\n *\n *  - set flags (.ok, .error, etc)\n *  - parse header\n *\n * Examples:\n *\n *  Aliasing `superagent` as `request` is nice:\n *\n *      request = superagent;\n *\n *  We can use the promise-like API, or pass callbacks:\n *\n *      request.get('/').end(function(res){});\n *      request.get('/', function(res){});\n *\n *  Sending data can be chained:\n *\n *      request\n *        .post('/user')\n *        .send({ name: 'tj' })\n *        .end(function(res){});\n *\n *  Or passed to `.send()`:\n *\n *      request\n *        .post('/user')\n *        .send({ name: 'tj' }, function(res){});\n *\n *  Or passed to `.post()`:\n *\n *      request\n *        .post('/user', { name: 'tj' })\n *        .end(function(res){});\n *\n * Or further reduced to a single call for simple cases:\n *\n *      request\n *        .post('/user', { name: 'tj' }, function(res){});\n *\n * @param {XMLHTTPRequest} xhr\n * @param {Object} options\n * @api private\n */\n\nfunction Response(req, options) {\n  options = options || {};\n  this.req = req;\n  this.xhr = this.req.xhr;\n  this.text = this.req.method !='HEAD' \n     ? this.xhr.responseText \n     : null;\n  this.setStatusProperties(this.xhr.status);\n  this.header = this.headers = parseHeader(this.xhr.getAllResponseHeaders());\n  // getAllResponseHeaders sometimes falsely returns \"\" for CORS requests, but\n  // getResponseHeader still works. so we get content-type even if getting\n  // other headers fails.\n  this.header['content-type'] = this.xhr.getResponseHeader('content-type');\n  this.setHeaderProperties(this.header);\n  this.body = this.req.method != 'HEAD'\n    ? this.parseBody(this.text)\n    : null;\n}\n\n/**\n * Get case-insensitive `field` value.\n *\n * @param {String} field\n * @return {String}\n * @api public\n */\n\nResponse.prototype.get = function(field){\n  return this.header[field.toLowerCase()];\n};\n\n/**\n * Set header related properties:\n *\n *   - `.type` the content type without params\n *\n * A response of \"Content-Type: text/plain; charset=utf-8\"\n * will provide you with a `.type` of \"text/plain\".\n *\n * @param {Object} header\n * @api private\n */\n\nResponse.prototype.setHeaderProperties = function(header){\n  // content-type\n  var ct = this.header['content-type'] || '';\n  this.type = type(ct);\n\n  // params\n  var obj = params(ct);\n  for (var key in obj) this[key] = obj[key];\n};\n\n/**\n * Parse the given body `str`.\n *\n * Used for auto-parsing of bodies. Parsers\n * are defined on the `superagent.parse` object.\n *\n * @param {String} str\n * @return {Mixed}\n * @api private\n */\n\nResponse.prototype.parseBody = function(str){\n  var parse = request.parse[this.type];\n  return parse && str && str.length\n    ? parse(str)\n    : null;\n};\n\n/**\n * Set flags such as `.ok` based on `status`.\n *\n * For example a 2xx response will give you a `.ok` of __true__\n * whereas 5xx will be __false__ and `.error` will be __true__. The\n * `.clientError` and `.serverError` are also available to be more\n * specific, and `.statusType` is the class of error ranging from 1..5\n * sometimes useful for mapping respond colors etc.\n *\n * \"sugar\" properties are also defined for common cases. Currently providing:\n *\n *   - .noContent\n *   - .badRequest\n *   - .unauthorized\n *   - .notAcceptable\n *   - .notFound\n *\n * @param {Number} status\n * @api private\n */\n\nResponse.prototype.setStatusProperties = function(status){\n  var type = status / 100 | 0;\n\n  // status / class\n  this.status = status;\n  this.statusType = type;\n\n  // basics\n  this.info = 1 == type;\n  this.ok = 2 == type;\n  this.clientError = 4 == type;\n  this.serverError = 5 == type;\n  this.error = (4 == type || 5 == type)\n    ? this.toError()\n    : false;\n\n  // sugar\n  this.accepted = 202 == status;\n  this.noContent = 204 == status || 1223 == status;\n  this.badRequest = 400 == status;\n  this.unauthorized = 401 == status;\n  this.notAcceptable = 406 == status;\n  this.notFound = 404 == status;\n  this.forbidden = 403 == status;\n};\n\n/**\n * Return an `Error` representative of this response.\n *\n * @return {Error}\n * @api public\n */\n\nResponse.prototype.toError = function(){\n  var req = this.req;\n  var method = req.method;\n  var url = req.url;\n\n  var msg = 'cannot ' + method + ' ' + url + ' (' + this.status + ')';\n  var err = new Error(msg);\n  err.status = this.status;\n  err.method = method;\n  err.url = url;\n\n  return err;\n};\n\n/**\n * Expose `Response`.\n */\n\nrequest.Response = Response;\n\n/**\n * Initialize a new `Request` with the given `method` and `url`.\n *\n * @param {String} method\n * @param {String} url\n * @api public\n */\n\nfunction Request(method, url) {\n  var self = this;\n  Emitter.call(this);\n  this._query = this._query || [];\n  this.method = method;\n  this.url = url;\n  this.header = {};\n  this._header = {};\n  this.on('end', function(){\n    var err = null;\n    var res = null;\n\n    try {\n      res = new Response(self); \n    } catch(e) {\n      err = new Error('Parser is unable to parse the response');\n      err.parse = true;\n      err.original = e;\n    }\n\n    self.callback(err, res);\n  });\n}\n\n/**\n * Mixin `Emitter`.\n */\n\nEmitter(Request.prototype);\n\n/**\n * Allow for extension\n */\n\nRequest.prototype.use = function(fn) {\n  fn(this);\n  return this;\n}\n\n/**\n * Set timeout to `ms`.\n *\n * @param {Number} ms\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.timeout = function(ms){\n  this._timeout = ms;\n  return this;\n};\n\n/**\n * Clear previous timeout.\n *\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.clearTimeout = function(){\n  this._timeout = 0;\n  clearTimeout(this._timer);\n  return this;\n};\n\n/**\n * Abort the request, and clear potential timeout.\n *\n * @return {Request}\n * @api public\n */\n\nRequest.prototype.abort = function(){\n  if (this.aborted) return;\n  this.aborted = true;\n  this.xhr.abort();\n  this.clearTimeout();\n  this.emit('abort');\n  return this;\n};\n\n/**\n * Set header `field` to `val`, or multiple fields with one object.\n *\n * Examples:\n *\n *      req.get('/')\n *        .set('Accept', 'application/json')\n *        .set('X-API-Key', 'foobar')\n *        .end(callback);\n *\n *      req.get('/')\n *        .set({ Accept: 'application/json', 'X-API-Key': 'foobar' })\n *        .end(callback);\n *\n * @param {String|Object} field\n * @param {String} val\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.set = function(field, val){\n  if (isObject(field)) {\n    for (var key in field) {\n      this.set(key, field[key]);\n    }\n    return this;\n  }\n  this._header[field.toLowerCase()] = val;\n  this.header[field] = val;\n  return this;\n};\n\n/**\n * Remove header `field`.\n *\n * Example:\n *\n *      req.get('/')\n *        .unset('User-Agent')\n *        .end(callback);\n *\n * @param {String} field\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.unset = function(field){\n  delete this._header[field.toLowerCase()];\n  delete this.header[field];\n  return this;\n};\n\n/**\n * Get case-insensitive header `field` value.\n *\n * @param {String} field\n * @return {String}\n * @api private\n */\n\nRequest.prototype.getHeader = function(field){\n  return this._header[field.toLowerCase()];\n};\n\n/**\n * Set Content-Type to `type`, mapping values from `request.types`.\n *\n * Examples:\n *\n *      superagent.types.xml = 'application/xml';\n *\n *      request.post('/')\n *        .type('xml')\n *        .send(xmlstring)\n *        .end(callback);\n *\n *      request.post('/')\n *        .type('application/xml')\n *        .send(xmlstring)\n *        .end(callback);\n *\n * @param {String} type\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.type = function(type){\n  this.set('Content-Type', request.types[type] || type);\n  return this;\n};\n\n/**\n * Set Accept to `type`, mapping values from `request.types`.\n *\n * Examples:\n *\n *      superagent.types.json = 'application/json';\n *\n *      request.get('/agent')\n *        .accept('json')\n *        .end(callback);\n *\n *      request.get('/agent')\n *        .accept('application/json')\n *        .end(callback);\n *\n * @param {String} accept\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.accept = function(type){\n  this.set('Accept', request.types[type] || type);\n  return this;\n};\n\n/**\n * Set Authorization field value with `user` and `pass`.\n *\n * @param {String} user\n * @param {String} pass\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.auth = function(user, pass){\n  var str = btoa(user + ':' + pass);\n  this.set('Authorization', 'Basic ' + str);\n  return this;\n};\n\n/**\n* Add query-string `val`.\n*\n* Examples:\n*\n*   request.get('/shoes')\n*     .query('size=10')\n*     .query({ color: 'blue' })\n*\n* @param {Object|String} val\n* @return {Request} for chaining\n* @api public\n*/\n\nRequest.prototype.query = function(val){\n  if ('string' != typeof val) val = serialize(val);\n  if (val) this._query.push(val);\n  return this;\n};\n\n/**\n * Write the field `name` and `val` for \"multipart/form-data\"\n * request bodies.\n *\n * ``` js\n * request.post('/upload')\n *   .field('foo', 'bar')\n *   .end(callback);\n * ```\n *\n * @param {String} name\n * @param {String|Blob|File} val\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.field = function(name, val){\n  if (!this._formData) this._formData = new FormData();\n  this._formData.append(name, val);\n  return this;\n};\n\n/**\n * Queue the given `file` as an attachment to the specified `field`,\n * with optional `filename`.\n *\n * ``` js\n * request.post('/upload')\n *   .attach(new Blob(['<a id=\"a\"><b id=\"b\">hey!</b></a>'], { type: \"text/html\"}))\n *   .end(callback);\n * ```\n *\n * @param {String} field\n * @param {Blob|File} file\n * @param {String} filename\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.attach = function(field, file, filename){\n  if (!this._formData) this._formData = new FormData();\n  this._formData.append(field, file, filename);\n  return this;\n};\n\n/**\n * Send `data`, defaulting the `.type()` to \"json\" when\n * an object is given.\n *\n * Examples:\n *\n *       // querystring\n *       request.get('/search')\n *         .end(callback)\n *\n *       // multiple data \"writes\"\n *       request.get('/search')\n *         .send({ search: 'query' })\n *         .send({ range: '1..5' })\n *         .send({ order: 'desc' })\n *         .end(callback)\n *\n *       // manual json\n *       request.post('/user')\n *         .type('json')\n *         .send('{\"name\":\"tj\"})\n *         .end(callback)\n *\n *       // auto json\n *       request.post('/user')\n *         .send({ name: 'tj' })\n *         .end(callback)\n *\n *       // manual x-www-form-urlencoded\n *       request.post('/user')\n *         .type('form')\n *         .send('name=tj')\n *         .end(callback)\n *\n *       // auto x-www-form-urlencoded\n *       request.post('/user')\n *         .type('form')\n *         .send({ name: 'tj' })\n *         .end(callback)\n *\n *       // defaults to x-www-form-urlencoded\n  *      request.post('/user')\n  *        .send('name=tobi')\n  *        .send('species=ferret')\n  *        .end(callback)\n *\n * @param {String|Object} data\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.send = function(data){\n  var obj = isObject(data);\n  var type = this.getHeader('Content-Type');\n\n  // merge\n  if (obj && isObject(this._data)) {\n    for (var key in data) {\n      this._data[key] = data[key];\n    }\n  } else if ('string' == typeof data) {\n    if (!type) this.type('form');\n    type = this.getHeader('Content-Type');\n    if ('application/x-www-form-urlencoded' == type) {\n      this._data = this._data\n        ? this._data + '&' + data\n        : data;\n    } else {\n      this._data = (this._data || '') + data;\n    }\n  } else {\n    this._data = data;\n  }\n\n  if (!obj) return this;\n  if (!type) this.type('json');\n  return this;\n};\n\n/**\n * Invoke the callback with `err` and `res`\n * and handle arity check.\n *\n * @param {Error} err\n * @param {Response} res\n * @api private\n */\n\nRequest.prototype.callback = function(err, res){\n  var fn = this._callback;\n  this.clearTimeout();\n  if (2 == fn.length) return fn(err, res);\n  if (err) return this.emit('error', err);\n  fn(res);\n};\n\n/**\n * Invoke callback with x-domain error.\n *\n * @api private\n */\n\nRequest.prototype.crossDomainError = function(){\n  var err = new Error('Origin is not allowed by Access-Control-Allow-Origin');\n  err.crossDomain = true;\n  this.callback(err);\n};\n\n/**\n * Invoke callback with timeout error.\n *\n * @api private\n */\n\nRequest.prototype.timeoutError = function(){\n  var timeout = this._timeout;\n  var err = new Error('timeout of ' + timeout + 'ms exceeded');\n  err.timeout = timeout;\n  this.callback(err);\n};\n\n/**\n * Enable transmission of cookies with x-domain requests.\n *\n * Note that for this to work the origin must not be\n * using \"Access-Control-Allow-Origin\" with a wildcard,\n * and also must set \"Access-Control-Allow-Credentials\"\n * to \"true\".\n *\n * @api public\n */\n\nRequest.prototype.withCredentials = function(){\n  this._withCredentials = true;\n  return this;\n};\n\n/**\n * Initiate request, invoking callback `fn(res)`\n * with an instanceof `Response`.\n *\n * @param {Function} fn\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.end = function(fn){\n  var self = this;\n  var xhr = this.xhr = getXHR();\n  var query = this._query.join('&');\n  var timeout = this._timeout;\n  var data = this._formData || this._data;\n\n  // store callback\n  this._callback = fn || noop;\n\n  // state change\n  xhr.onreadystatechange = function(){\n    if (4 != xhr.readyState) return;\n    if (0 == xhr.status) {\n      if (self.aborted) return self.timeoutError();\n      return self.crossDomainError();\n    }\n    self.emit('end');\n  };\n\n  // progress\n  if (xhr.upload) {\n    xhr.upload.onprogress = function(e){\n      e.percent = e.loaded / e.total * 100;\n      self.emit('progress', e);\n    };\n  }\n\n  // timeout\n  if (timeout && !this._timer) {\n    this._timer = setTimeout(function(){\n      self.abort();\n    }, timeout);\n  }\n\n  // querystring\n  if (query) {\n    query = request.serializeObject(query);\n    this.url += ~this.url.indexOf('?')\n      ? '&' + query\n      : '?' + query;\n  }\n\n  // initiate request\n  xhr.open(this.method, this.url, true);\n\n  // CORS\n  if (this._withCredentials) xhr.withCredentials = true;\n\n  // body\n  if ('GET' != this.method && 'HEAD' != this.method && 'string' != typeof data && !isHost(data)) {\n    // serialize stuff\n    var serialize = request.serialize[this.getHeader('Content-Type')];\n    if (serialize) data = serialize(data);\n  }\n\n  // set header fields\n  for (var field in this.header) {\n    if (null == this.header[field]) continue;\n    xhr.setRequestHeader(field, this.header[field]);\n  }\n\n  // send stuff\n  this.emit('request', this);\n  xhr.send(data);\n  return this;\n};\n\n/**\n * Expose `Request`.\n */\n\nrequest.Request = Request;\n\n/**\n * Issue a request:\n *\n * Examples:\n *\n *    request('GET', '/users').end(callback)\n *    request('/users').end(callback)\n *    request('/users', callback)\n *\n * @param {String} method\n * @param {String|Function} url or callback\n * @return {Request}\n * @api public\n */\n\nfunction request(method, url) {\n  // callback\n  if ('function' == typeof url) {\n    return new Request('GET', method).end(url);\n  }\n\n  // url first\n  if (1 == arguments.length) {\n    return new Request('GET', method);\n  }\n\n  return new Request(method, url);\n}\n\n/**\n * GET `url` with optional callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed|Function} data or fn\n * @param {Function} fn\n * @return {Request}\n * @api public\n */\n\nrequest.get = function(url, data, fn){\n  var req = request('GET', url);\n  if ('function' == typeof data) fn = data, data = null;\n  if (data) req.query(data);\n  if (fn) req.end(fn);\n  return req;\n};\n\n/**\n * HEAD `url` with optional callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed|Function} data or fn\n * @param {Function} fn\n * @return {Request}\n * @api public\n */\n\nrequest.head = function(url, data, fn){\n  var req = request('HEAD', url);\n  if ('function' == typeof data) fn = data, data = null;\n  if (data) req.send(data);\n  if (fn) req.end(fn);\n  return req;\n};\n\n/**\n * DELETE `url` with optional callback `fn(res)`.\n *\n * @param {String} url\n * @param {Function} fn\n * @return {Request}\n * @api public\n */\n\nrequest.del = function(url, fn){\n  var req = request('DELETE', url);\n  if (fn) req.end(fn);\n  return req;\n};\n\n/**\n * PATCH `url` with optional `data` and callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed} data\n * @param {Function} fn\n * @return {Request}\n * @api public\n */\n\nrequest.patch = function(url, data, fn){\n  var req = request('PATCH', url);\n  if ('function' == typeof data) fn = data, data = null;\n  if (data) req.send(data);\n  if (fn) req.end(fn);\n  return req;\n};\n\n/**\n * POST `url` with optional `data` and callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed} data\n * @param {Function} fn\n * @return {Request}\n * @api public\n */\n\nrequest.post = function(url, data, fn){\n  var req = request('POST', url);\n  if ('function' == typeof data) fn = data, data = null;\n  if (data) req.send(data);\n  if (fn) req.end(fn);\n  return req;\n};\n\n/**\n * PUT `url` with optional `data` and callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed|Function} data or fn\n * @param {Function} fn\n * @return {Request}\n * @api public\n */\n\nrequest.put = function(url, data, fn){\n  var req = request('PUT', url);\n  if ('function' == typeof data) fn = data, data = null;\n  if (data) req.send(data);\n  if (fn) req.end(fn);\n  return req;\n};\n\n/**\n * Expose `request`.\n */\n\nmodule.exports = request;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/superagent/lib/client.js\n ** module id = 1\n ** module chunks = 0\n **/","\n/**\n * Expose `Emitter`.\n */\n\nmodule.exports = Emitter;\n\n/**\n * Initialize a new `Emitter`.\n *\n * @api public\n */\n\nfunction Emitter(obj) {\n  if (obj) return mixin(obj);\n};\n\n/**\n * Mixin the emitter properties.\n *\n * @param {Object} obj\n * @return {Object}\n * @api private\n */\n\nfunction mixin(obj) {\n  for (var key in Emitter.prototype) {\n    obj[key] = Emitter.prototype[key];\n  }\n  return obj;\n}\n\n/**\n * Listen on the given `event` with `fn`.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.on =\nEmitter.prototype.addEventListener = function(event, fn){\n  this._callbacks = this._callbacks || {};\n  (this._callbacks[event] = this._callbacks[event] || [])\n    .push(fn);\n  return this;\n};\n\n/**\n * Adds an `event` listener that will be invoked a single\n * time then automatically removed.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.once = function(event, fn){\n  var self = this;\n  this._callbacks = this._callbacks || {};\n\n  function on() {\n    self.off(event, on);\n    fn.apply(this, arguments);\n  }\n\n  on.fn = fn;\n  this.on(event, on);\n  return this;\n};\n\n/**\n * Remove the given callback for `event` or all\n * registered callbacks.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.off =\nEmitter.prototype.removeListener =\nEmitter.prototype.removeAllListeners =\nEmitter.prototype.removeEventListener = function(event, fn){\n  this._callbacks = this._callbacks || {};\n\n  // all\n  if (0 == arguments.length) {\n    this._callbacks = {};\n    return this;\n  }\n\n  // specific event\n  var callbacks = this._callbacks[event];\n  if (!callbacks) return this;\n\n  // remove all handlers\n  if (1 == arguments.length) {\n    delete this._callbacks[event];\n    return this;\n  }\n\n  // remove specific handler\n  var cb;\n  for (var i = 0; i < callbacks.length; i++) {\n    cb = callbacks[i];\n    if (cb === fn || cb.fn === fn) {\n      callbacks.splice(i, 1);\n      break;\n    }\n  }\n  return this;\n};\n\n/**\n * Emit `event` with the given args.\n *\n * @param {String} event\n * @param {Mixed} ...\n * @return {Emitter}\n */\n\nEmitter.prototype.emit = function(event){\n  this._callbacks = this._callbacks || {};\n  var args = [].slice.call(arguments, 1)\n    , callbacks = this._callbacks[event];\n\n  if (callbacks) {\n    callbacks = callbacks.slice(0);\n    for (var i = 0, len = callbacks.length; i < len; ++i) {\n      callbacks[i].apply(this, args);\n    }\n  }\n\n  return this;\n};\n\n/**\n * Return array of callbacks for `event`.\n *\n * @param {String} event\n * @return {Array}\n * @api public\n */\n\nEmitter.prototype.listeners = function(event){\n  this._callbacks = this._callbacks || {};\n  return this._callbacks[event] || [];\n};\n\n/**\n * Check if this emitter has `event` handlers.\n *\n * @param {String} event\n * @return {Boolean}\n * @api public\n */\n\nEmitter.prototype.hasListeners = function(event){\n  return !! this.listeners(event).length;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/superagent/~/component-emitter/index.js\n ** module id = 2\n ** module chunks = 0\n **/","\n/**\n * Reduce `arr` with `fn`.\n *\n * @param {Array} arr\n * @param {Function} fn\n * @param {Mixed} initial\n *\n * TODO: combatible error handling?\n */\n\nmodule.exports = function(arr, fn, initial){  \n  var idx = 0;\n  var len = arr.length;\n  var curr = arguments.length == 3\n    ? initial\n    : arr[idx++];\n\n  while (idx < len) {\n    curr = fn.call(null, curr, arr[idx], ++idx, arr);\n  }\n  \n  return curr;\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/superagent/~/reduce-component/index.js\n ** module id = 3\n ** module chunks = 0\n **/"],"sourceRoot":""}